name: Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  docker-kdl-server:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./app
          file: ./app/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/kdl-server:${{ steps.get_version.outputs.VERSION }}
            konstellation/kdl-server:latest
  
  docker-drone-authorizer:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./drone-authorizer
          file: ./drone-authorizer/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/drone-authorizer:${{ steps.get_version.outputs.VERSION }}
            konstellation/drone-authorizer:latest

  docker-gitea-oauth2-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./gitea-oauth2-setup
          file: ./gitea-oauth2-setup/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/gitea-oauth2-setup:${{ steps.get_version.outputs.VERSION }}
            konstellation/gitea-oauth2-setup:latest

  docker-project-operator:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./project-operator
          file: ./project-operator/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/project-operator:${{ steps.get_version.outputs.VERSION }}
            konstellation/project-operator:latest
  
  docker-mlflow:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./mlflow
          file: ./mlflow/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/mlflow:${{ steps.get_version.outputs.VERSION }}
            konstellation/mlflow:latest

  docker-cleaner:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./cleaner
          file: ./cleaner/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/cleaner:${{ steps.get_version.outputs.VERSION }}
            konstellation/cleaner:latest
  
  docker-backup:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backup
          file: ./backup/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/kdl-backup:${{ steps.get_version.outputs.VERSION }}
            konstellation/kdl-backup:latest

  docker-user-tools-operator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./user-tools-operator
          file: ./user-tools-operator/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/user-tools-operator:${{ steps.get_version.outputs.VERSION }}
            konstellation/user-tools-operator:latest
  
  docker-vscode:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./vscode
          file: ./vscode/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/vscode:${{ steps.get_version.outputs.VERSION }}
            konstellation/vscode:latest

  docker-jupyter-gpu:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./jupyter-gpu
          file: ./jupyter-gpu/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            konstellation/jupyter-gpu:${{ steps.get_version.outputs.VERSION }}
            konstellation/jupyter-gpu:latest

  helm:
    if: ${{ ! contains( github.event.ref, 'alpha' ) }}
    runs-on: ubuntu-latest
    needs:
      - docker-kdl-server
      - docker-drone-authorizer
      - docker-gitea-oauth2-setup
      - docker-project-operator
      - docker-mlflow
      - docker-cleaner
      - docker-backup
      - docker-user-tools-operator
      - docker-vscode
      - docker-jupyter-gpu
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      
      - name: Get Version
        id: get_version
        run: |
          # format version X.X.X 
          RELEASE_VERSION=`echo "${GITHUB_REF#refs/tags/}" | sed -e 's/v//g' | sed -e 's/-alpha.*/.0/g'`
          echo ::set-output name=RELEASE_VERSION::${RELEASE_VERSION}
          echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - uses: chrisdickinson/setup-yq@latest
      - name: Replace component version with YQ
        run:  |
          # set image tags on kdl
          yq w -i helm/kdl-server/values.yaml 'kdlServer.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'droneAuthorizer.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'giteaOauth2Setup.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'projectOperator.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'mlflow.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'cleaner.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'userToolsOperator.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'userToolsOperator.vscode.image.tag' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/values.yaml 'userToolsOperator.jupytimage.tag' ${{ steps.get_version.outputs.VERSION }}

          # set app version and chart version for kdl
          yq w -i helm/kdl-server/Chart.yaml 'appVersion' ${{ steps.get_version.outputs.VERSION }}
          yq w -i helm/kdl-server/Chart.yaml 'version' ${{ steps.get_version.outputs.RELEASE_VERSION }}

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.0.0
        with:
          charts_dir: 'helm'
          charts_repo_url: 'http://kdl.konstellation.io'
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Update Helm Chart
        run:  |
          curl --request POST --header "${{ secrets.NOTIFY_TOKEN }}" ${{ secrets.NOTIFY_URL }}${{ steps.get_version.outputs.RELEASE_VERSION }} >/dev/null 2>&1
