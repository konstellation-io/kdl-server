// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package giteaservice is a generated GoMock package.
package giteaservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kdl-server/app/api/entity"
)

// MockGiteaClient is a mock of GiteaClient interface.
type MockGiteaClient struct {
	ctrl     *gomock.Controller
	recorder *MockGiteaClientMockRecorder
}

// MockGiteaClientMockRecorder is the mock recorder for MockGiteaClient.
type MockGiteaClientMockRecorder struct {
	mock *MockGiteaClient
}

// NewMockGiteaClient creates a new mock instance.
func NewMockGiteaClient(ctrl *gomock.Controller) *MockGiteaClient {
	mock := &MockGiteaClient{ctrl: ctrl}
	mock.recorder = &MockGiteaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGiteaClient) EXPECT() *MockGiteaClientMockRecorder {
	return m.recorder
}

// AddCollaborator mocks base method.
func (m *MockGiteaClient) AddCollaborator(repoName, username string, accessLevel entity.AccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCollaborator", repoName, username, accessLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCollaborator indicates an expected call of AddCollaborator.
func (mr *MockGiteaClientMockRecorder) AddCollaborator(repoName, username, accessLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCollaborator", reflect.TypeOf((*MockGiteaClient)(nil).AddCollaborator), repoName, username, accessLevel)
}

// AddSSHKey mocks base method.
func (m *MockGiteaClient) AddSSHKey(username, publicSSHKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSSHKey", username, publicSSHKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSSHKey indicates an expected call of AddSSHKey.
func (mr *MockGiteaClientMockRecorder) AddSSHKey(username, publicSSHKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSSHKey", reflect.TypeOf((*MockGiteaClient)(nil).AddSSHKey), username, publicSSHKey)
}

// CreateRepo mocks base method.
func (m *MockGiteaClient) CreateRepo(name, ownerUsername string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", name, ownerUsername)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockGiteaClientMockRecorder) CreateRepo(name, ownerUsername interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockGiteaClient)(nil).CreateRepo), name, ownerUsername)
}

// FindAllUsers mocks base method.
func (m *MockGiteaClient) FindAllUsers() ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUsers")
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUsers indicates an expected call of FindAllUsers.
func (mr *MockGiteaClientMockRecorder) FindAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUsers", reflect.TypeOf((*MockGiteaClient)(nil).FindAllUsers))
}

// MirrorRepo mocks base method.
func (m *MockGiteaClient) MirrorRepo(url, repoName, userName, userToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MirrorRepo", url, repoName, userName, userToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// MirrorRepo indicates an expected call of MirrorRepo.
func (mr *MockGiteaClientMockRecorder) MirrorRepo(url, repoName, userName, userToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorRepo", reflect.TypeOf((*MockGiteaClient)(nil).MirrorRepo), url, repoName, userName, userToken)
}

// RemoveCollaborator mocks base method.
func (m *MockGiteaClient) RemoveCollaborator(repoName, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCollaborator", repoName, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCollaborator indicates an expected call of RemoveCollaborator.
func (mr *MockGiteaClientMockRecorder) RemoveCollaborator(repoName, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCollaborator", reflect.TypeOf((*MockGiteaClient)(nil).RemoveCollaborator), repoName, username)
}

// UpdateCollaboratorPermissions mocks base method.
func (m *MockGiteaClient) UpdateCollaboratorPermissions(repoName, username string, accessLevel entity.AccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCollaboratorPermissions", repoName, username, accessLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCollaboratorPermissions indicates an expected call of UpdateCollaboratorPermissions.
func (mr *MockGiteaClientMockRecorder) UpdateCollaboratorPermissions(repoName, username, accessLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollaboratorPermissions", reflect.TypeOf((*MockGiteaClient)(nil).UpdateCollaboratorPermissions), repoName, username, accessLevel)
}

// UpdateRepoName mocks base method.
func (m *MockGiteaClient) UpdateRepoName(oldRepoName, newRepoName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoName", oldRepoName, newRepoName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoName indicates an expected call of UpdateRepoName.
func (mr *MockGiteaClientMockRecorder) UpdateRepoName(oldRepoName, newRepoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoName", reflect.TypeOf((*MockGiteaClient)(nil).UpdateRepoName), oldRepoName, newRepoName)
}

// UpdateSSHKey mocks base method.
func (m *MockGiteaClient) UpdateSSHKey(username, newPublicSSHKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSSHKey", username, newPublicSSHKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSSHKey indicates an expected call of UpdateSSHKey.
func (mr *MockGiteaClientMockRecorder) UpdateSSHKey(username, newPublicSSHKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSSHKey", reflect.TypeOf((*MockGiteaClient)(nil).UpdateSSHKey), username, newPublicSSHKey)
}
