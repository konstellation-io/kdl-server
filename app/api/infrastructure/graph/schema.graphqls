type Query {
  me: User!
  projects: [Project!]!
  project(id: ID!): Project!
  users: [User!]!
  qualityProjectDesc(description: String!): QualityProjectDesc!
  knowledgeGraph(projectId: ID!): KnowledgeGraph!
}

type Mutation {
  addUser(input: AddUserInput!): User!
  removeUsers(input: RemoveUsersInput!): [User!]!
  updateAccessLevel(input: UpdateAccessLevelInput!): [User!]!
  regenerateSSHKey: User!
  createProject(input: CreateProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
  addMembers(input: AddMembersInput!): Project!
  removeMember(input: RemoveMemberInput!): Project!
  updateMember(input: UpdateMemberInput!): Project!
  addApiToken(input: ApiTokenInput): ApiToken
  removeApiToken(input: RemoveApiTokenInput): ApiToken!
  setKGStarred(input: SetKGStarredInput!): SetKGStarredRes!
  setActiveUserTools(input: SetActiveUserToolsInput!): User!
}

type QualityProjectDesc {
  quality: Int!
}

type Topic {
  name: String!
  relevance: Float!
}

type KnowledgeGraph {
  items: [KnowledgeGraphItem!]!
  topics: [Topic!]!
}

type KnowledgeGraphItem {
  id: ID!
  category: KnowledgeGraphItemCat!
  title: String!
  abstract: String!
  authors: [String!]!
  score: Float!
  date: String!
  url: String!
  topics: [Topic!]!
  starred: Boolean!

  # optional fields
  repoUrls: [String!]
  externalId: ID # for example: arxivId
  frameworks: [String!]
}

type SSHKey {
  public: String!
  private: String!
  creationDate: String!
  lastActivity: String
}

type User {
  id: ID!
  username: String!
  email: String!
  creationDate: String!
  accessLevel: AccessLevel!
  lastActivity: String
  apiTokens: [ApiToken!]!
  areToolsActive: Boolean!
  sshKey: SSHKey!
}

type ApiToken {
  id: ID!
  name: String!
  creationDate: String!
  lastUsedDate: String!
  token: String!
}

type Member {
  user: User!
  accessLevel: AccessLevel!
  addedDate: String!
}

type ToolUrls {
  gitea: String!
  minio: String!
  jupyter: String!
  vscode: String!
  drone: String!
  mlflow: String!
}

enum AccessLevel {
  VIEWER
  MANAGER
  ADMIN
}

input ApiTokenInput {
  userId: ID!
  name: String
}

input UpdateProjectInput {
  id: ID!
  name: String
  description: String
  repository: UpdateProjectRepositoryInput
  archived: Boolean
}

input SetKGStarredInput {
  projectId: ID!
  kgItemId: ID!
  starred: Boolean!
}

input AddMembersInput {
  projectId: ID!
  userIds: [ID!]!
}

input RemoveMemberInput {
  projectId: ID!
  userId: ID!
}

input RemoveApiTokenInput {
  apiTokenId: ID!
}

input UpdateMemberInput {
  projectId: ID!
  userId: ID!
  accessLevel: AccessLevel!
}

input UpdateProjectRepositoryInput {
  type: RepositoryType!
  external: UpdateExternalRepositoryInput
  internal: UpdateInternalRepositoryInput
}

input UpdateInternalRepositoryInput {
  name: String!
}

input UpdateExternalRepositoryInput {
  url: String!
  username: String!
  token: String!
}

input RemoveUsersInput {
  userIds: [ID!]!
}

input AddUserInput {
  email: String!
  username: String!
  password: String!
  accessLevel: AccessLevel!
}

input UpdateAccessLevelInput {
  userIds: [ID!]!
  accessLevel: AccessLevel!
}

input CreateProjectInput {
  name: String!
  description: String!
  repository: RepositoryInput!
}

input SetBoolFieldInput {
  id: ID!
  value: Boolean!
}

input SetActiveUserToolsInput {
  active: Boolean!
}

type SetKGStarredRes {
  kgItemId: ID!
  starred: Boolean!
}

type Project {
  id: ID!
  name: String!
  description: String!
  favorite: Boolean!
  repository: Repository
  creationDate: String!
  lastActivationDate: String!
  error: String
  members: [Member!]!
  toolUrls: ToolUrls!
  needAccess: Boolean!
  archived: Boolean!
}

input RepositoryInput {
  type: RepositoryType!
  external: ExternalRepositoryInput
  internal: InternalRepositoryInput
}

input ExternalRepositoryInput {
  url: String!
  username: String!
  token: String!
}

input InternalRepositoryInput {
  name: String!
}

type Repository {
  type: RepositoryType!
  url: String!
  error: String
  external: ExternalRepository
}

type ExternalRepository {
  username: String!
}

enum RepositoryType {
  INTERNAL
  EXTERNAL
}

enum KnowledgeGraphItemCat {
  Paper
  Code
}
