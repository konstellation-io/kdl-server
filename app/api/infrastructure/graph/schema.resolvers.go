package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"
	"fmt"

	"github.com/konstellation-io/kdl-server/app/api/entity"
	"github.com/konstellation-io/kdl-server/app/api/infrastructure/graph/generated"
	"github.com/konstellation-io/kdl-server/app/api/infrastructure/graph/model"
)

// User is the resolver for the user field.
func (r *memberResolver) User(ctx context.Context, obj *entity.Member) (*entity.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// AddedDate is the resolver for the addedDate field.
func (r *memberResolver) AddedDate(ctx context.Context, obj *entity.Member) (string, error) {
	panic(fmt.Errorf("not implemented: AddedDate - addedDate"))
}

// RemoveUsers is the resolver for the removeUsers field.
func (r *mutationResolver) RemoveUsers(ctx context.Context, input model.RemoveUsersInput) ([]entity.User, error) {
	panic(fmt.Errorf("not implemented: RemoveUsers - removeUsers"))
}

// UpdateAccessLevel is the resolver for the updateAccessLevel field.
func (r *mutationResolver) UpdateAccessLevel(ctx context.Context, input model.UpdateAccessLevelInput) ([]entity.User, error) {
	panic(fmt.Errorf("not implemented: UpdateAccessLevel - updateAccessLevel"))
}

// RegenerateSSHKey is the resolver for the regenerateSSHKey field.
func (r *mutationResolver) RegenerateSSHKey(ctx context.Context) (*entity.User, error) {
	panic(fmt.Errorf("not implemented: RegenerateSSHKey - regenerateSSHKey"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input model.UpdateProjectInput) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, input model.DeleteProjectInput) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// AddMembers is the resolver for the addMembers field.
func (r *mutationResolver) AddMembers(ctx context.Context, input model.AddMembersInput) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: AddMembers - addMembers"))
}

// RemoveMembers is the resolver for the removeMembers field.
func (r *mutationResolver) RemoveMembers(ctx context.Context, input model.RemoveMembersInput) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: RemoveMembers - removeMembers"))
}

// UpdateMembers is the resolver for the updateMembers field.
func (r *mutationResolver) UpdateMembers(ctx context.Context, input model.UpdateMembersInput) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateMembers - updateMembers"))
}

// AddAPIToken is the resolver for the addApiToken field.
func (r *mutationResolver) AddAPIToken(ctx context.Context, input *model.APITokenInput) (*entity.APIToken, error) {
	panic(fmt.Errorf("not implemented: AddAPIToken - addApiToken"))
}

// RemoveAPIToken is the resolver for the removeApiToken field.
func (r *mutationResolver) RemoveAPIToken(ctx context.Context, input *model.RemoveAPITokenInput) (*entity.APIToken, error) {
	panic(fmt.Errorf("not implemented: RemoveAPIToken - removeApiToken"))
}

// SetActiveUserTools is the resolver for the setActiveUserTools field.
func (r *mutationResolver) SetActiveUserTools(ctx context.Context, input model.SetActiveUserToolsInput) (*entity.User, error) {
	panic(fmt.Errorf("not implemented: SetActiveUserTools - setActiveUserTools"))
}

// CreationDate is the resolver for the creationDate field.
func (r *projectResolver) CreationDate(ctx context.Context, obj *entity.Project) (string, error) {
	panic(fmt.Errorf("not implemented: CreationDate - creationDate"))
}

// ToolUrls is the resolver for the toolUrls field.
func (r *projectResolver) ToolUrls(ctx context.Context, obj *entity.Project) (*entity.ToolUrls, error) {
	panic(fmt.Errorf("not implemented: ToolUrls - toolUrls"))
}

// NeedAccess is the resolver for the needAccess field.
func (r *projectResolver) NeedAccess(ctx context.Context, obj *entity.Project) (bool, error) {
	panic(fmt.Errorf("not implemented: NeedAccess - needAccess"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*entity.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]entity.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*entity.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]entity.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// QualityProjectDesc is the resolver for the qualityProjectDesc field.
func (r *queryResolver) QualityProjectDesc(ctx context.Context, description string) (*model.QualityProjectDesc, error) {
	panic(fmt.Errorf("not implemented: QualityProjectDesc - qualityProjectDesc"))
}

// Runtimes is the resolver for the runtimes field.
func (r *queryResolver) Runtimes(ctx context.Context) ([]entity.Runtime, error) {
	panic(fmt.Errorf("not implemented: Runtimes - runtimes"))
}

// RunningRuntime is the resolver for the runningRuntime field.
func (r *queryResolver) RunningRuntime(ctx context.Context) (*entity.Runtime, error) {
	panic(fmt.Errorf("not implemented: RunningRuntime - runningRuntime"))
}

// Capabilities is the resolver for the capabilities field.
func (r *queryResolver) Capabilities(ctx context.Context) ([]model.Capability, error) {
	panic(fmt.Errorf("not implemented: Capabilities - capabilities"))
}

// RunningCapability is the resolver for the runningCapability field.
func (r *queryResolver) RunningCapability(ctx context.Context) (*model.Capability, error) {
	panic(fmt.Errorf("not implemented: RunningCapability - runningCapability"))
}

// Kubeconfig is the resolver for the kubeconfig field.
func (r *queryResolver) Kubeconfig(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Kubeconfig - kubeconfig"))
}

// Type is the resolver for the type field.
func (r *repositoryResolver) Type(ctx context.Context, obj *entity.Repository) (model.RepositoryType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// CreationDate is the resolver for the creationDate field.
func (r *sSHKeyResolver) CreationDate(ctx context.Context, obj *entity.SSHKey) (string, error) {
	panic(fmt.Errorf("not implemented: CreationDate - creationDate"))
}

// LastActivity is the resolver for the lastActivity field.
func (r *sSHKeyResolver) LastActivity(ctx context.Context, obj *entity.SSHKey) (*string, error) {
	panic(fmt.Errorf("not implemented: LastActivity - lastActivity"))
}

// CreationDate is the resolver for the creationDate field.
func (r *userResolver) CreationDate(ctx context.Context, obj *entity.User) (string, error) {
	panic(fmt.Errorf("not implemented: CreationDate - creationDate"))
}

// LastActivity is the resolver for the lastActivity field.
func (r *userResolver) LastActivity(ctx context.Context, obj *entity.User) (*string, error) {
	panic(fmt.Errorf("not implemented: LastActivity - lastActivity"))
}

// IsKubeconfigEnabled is the resolver for the isKubeconfigEnabled field.
func (r *userResolver) IsKubeconfigEnabled(ctx context.Context, obj *entity.User) (bool, error) {
	panic(fmt.Errorf("not implemented: IsKubeconfigEnabled - isKubeconfigEnabled"))
}

// Member returns generated.MemberResolver implementation.
func (r *Resolver) Member() generated.MemberResolver { return &memberResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Project returns generated.ProjectResolver implementation.
func (r *Resolver) Project() generated.ProjectResolver { return &projectResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Repository returns generated.RepositoryResolver implementation.
func (r *Resolver) Repository() generated.RepositoryResolver { return &repositoryResolver{r} }

// SSHKey returns generated.SSHKeyResolver implementation.
func (r *Resolver) SSHKey() generated.SSHKeyResolver { return &sSHKeyResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type memberResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type projectResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type repositoryResolver struct{ *Resolver }
type sSHKeyResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
