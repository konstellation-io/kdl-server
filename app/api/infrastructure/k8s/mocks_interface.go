// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kdl-server/app/api/entity"
	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockClientInterface) CheckConnection() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockClientInterfaceMockRecorder) CheckConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockClientInterface)(nil).CheckConnection))
}

// CreateConfigMapWatcher mocks base method.
func (m *MockClientInterface) CreateConfigMapWatcher(ctx context.Context) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigMapWatcher", ctx)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigMapWatcher indicates an expected call of CreateConfigMapWatcher.
func (mr *MockClientInterfaceMockRecorder) CreateConfigMapWatcher(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMapWatcher", reflect.TypeOf((*MockClientInterface)(nil).CreateConfigMapWatcher), ctx)
}

// CreateKDLProjectCR mocks base method.
func (m *MockClientInterface) CreateKDLProjectCR(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKDLProjectCR", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKDLProjectCR indicates an expected call of CreateKDLProjectCR.
func (mr *MockClientInterfaceMockRecorder) CreateKDLProjectCR(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKDLProjectCR", reflect.TypeOf((*MockClientInterface)(nil).CreateKDLProjectCR), ctx, projectID)
}

// CreateKDLUserToolsCR mocks base method.
func (m *MockClientInterface) CreateKDLUserToolsCR(ctx context.Context, username string, data UserToolsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKDLUserToolsCR", ctx, username, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKDLUserToolsCR indicates an expected call of CreateKDLUserToolsCR.
func (mr *MockClientInterfaceMockRecorder) CreateKDLUserToolsCR(ctx, username, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKDLUserToolsCR", reflect.TypeOf((*MockClientInterface)(nil).CreateKDLUserToolsCR), ctx, username, data)
}

// CreateSecret mocks base method.
func (m *MockClientInterface) CreateSecret(ctx context.Context, name string, values, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, name, values, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockClientInterfaceMockRecorder) CreateSecret(ctx, name, values, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockClientInterface)(nil).CreateSecret), ctx, name, values, labels)
}

// CreateUserSSHKeySecret mocks base method.
func (m *MockClientInterface) CreateUserSSHKeySecret(ctx context.Context, user entity.User, public, private string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSSHKeySecret", ctx, user, public, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSSHKeySecret indicates an expected call of CreateUserSSHKeySecret.
func (mr *MockClientInterfaceMockRecorder) CreateUserSSHKeySecret(ctx, user, public, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSSHKeySecret", reflect.TypeOf((*MockClientInterface)(nil).CreateUserSSHKeySecret), ctx, user, public, private)
}

// CreateUserServiceAccount mocks base method.
func (m *MockClientInterface) CreateUserServiceAccount(ctx context.Context, usernameSlug string) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserServiceAccount", ctx, usernameSlug)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserServiceAccount indicates an expected call of CreateUserServiceAccount.
func (mr *MockClientInterfaceMockRecorder) CreateUserServiceAccount(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserServiceAccount", reflect.TypeOf((*MockClientInterface)(nil).CreateUserServiceAccount), ctx, usernameSlug)
}

// DeleteKDLProjectCR mocks base method.
func (m *MockClientInterface) DeleteKDLProjectCR(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKDLProjectCR", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKDLProjectCR indicates an expected call of DeleteKDLProjectCR.
func (mr *MockClientInterfaceMockRecorder) DeleteKDLProjectCR(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKDLProjectCR", reflect.TypeOf((*MockClientInterface)(nil).DeleteKDLProjectCR), ctx, projectID)
}

// DeleteUserServiceAccount mocks base method.
func (m *MockClientInterface) DeleteUserServiceAccount(ctx context.Context, usernameSlug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserServiceAccount", ctx, usernameSlug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserServiceAccount indicates an expected call of DeleteUserServiceAccount.
func (mr *MockClientInterfaceMockRecorder) DeleteUserServiceAccount(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserServiceAccount", reflect.TypeOf((*MockClientInterface)(nil).DeleteUserServiceAccount), ctx, usernameSlug)
}

// DeleteUserToolsCR mocks base method.
func (m *MockClientInterface) DeleteUserToolsCR(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserToolsCR", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserToolsCR indicates an expected call of DeleteUserToolsCR.
func (mr *MockClientInterfaceMockRecorder) DeleteUserToolsCR(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserToolsCR", reflect.TypeOf((*MockClientInterface)(nil).DeleteUserToolsCR), ctx, username)
}

// GetCapabilitiesIDFromUserTools mocks base method.
func (m *MockClientInterface) GetCapabilitiesIDFromUserTools(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilitiesIDFromUserTools", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilitiesIDFromUserTools indicates an expected call of GetCapabilitiesIDFromUserTools.
func (mr *MockClientInterfaceMockRecorder) GetCapabilitiesIDFromUserTools(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilitiesIDFromUserTools", reflect.TypeOf((*MockClientInterface)(nil).GetCapabilitiesIDFromUserTools), ctx, username)
}

// GetConfigMap mocks base method.
func (m *MockClientInterface) GetConfigMap(ctx context.Context, name string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMap", ctx, name)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap.
func (mr *MockClientInterfaceMockRecorder) GetConfigMap(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockClientInterface)(nil).GetConfigMap), ctx, name)
}

// GetConfigMapTemplateNameKDLProject mocks base method.
func (m *MockClientInterface) GetConfigMapTemplateNameKDLProject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapTemplateNameKDLProject")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigMapTemplateNameKDLProject indicates an expected call of GetConfigMapTemplateNameKDLProject.
func (mr *MockClientInterfaceMockRecorder) GetConfigMapTemplateNameKDLProject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapTemplateNameKDLProject", reflect.TypeOf((*MockClientInterface)(nil).GetConfigMapTemplateNameKDLProject))
}

// GetConfigMapTemplateNameKDLUserTools mocks base method.
func (m *MockClientInterface) GetConfigMapTemplateNameKDLUserTools() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapTemplateNameKDLUserTools")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigMapTemplateNameKDLUserTools indicates an expected call of GetConfigMapTemplateNameKDLUserTools.
func (mr *MockClientInterfaceMockRecorder) GetConfigMapTemplateNameKDLUserTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapTemplateNameKDLUserTools", reflect.TypeOf((*MockClientInterface)(nil).GetConfigMapTemplateNameKDLUserTools))
}

// GetKDLProjectCR mocks base method.
func (m *MockClientInterface) GetKDLProjectCR(ctx context.Context, name string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKDLProjectCR", ctx, name)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKDLProjectCR indicates an expected call of GetKDLProjectCR.
func (mr *MockClientInterfaceMockRecorder) GetKDLProjectCR(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKDLProjectCR", reflect.TypeOf((*MockClientInterface)(nil).GetKDLProjectCR), ctx, name)
}

// GetKDLUserToolsCR mocks base method.
func (m *MockClientInterface) GetKDLUserToolsCR(ctx context.Context, username string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKDLUserToolsCR", ctx, username)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKDLUserToolsCR indicates an expected call of GetKDLUserToolsCR.
func (mr *MockClientInterfaceMockRecorder) GetKDLUserToolsCR(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKDLUserToolsCR", reflect.TypeOf((*MockClientInterface)(nil).GetKDLUserToolsCR), ctx, username)
}

// GetRuntimeIDFromUserTools mocks base method.
func (m *MockClientInterface) GetRuntimeIDFromUserTools(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeIDFromUserTools", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeIDFromUserTools indicates an expected call of GetRuntimeIDFromUserTools.
func (mr *MockClientInterfaceMockRecorder) GetRuntimeIDFromUserTools(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeIDFromUserTools", reflect.TypeOf((*MockClientInterface)(nil).GetRuntimeIDFromUserTools), ctx, username)
}

// GetSecret mocks base method.
func (m *MockClientInterface) GetSecret(ctx context.Context, name string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, name)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientInterfaceMockRecorder) GetSecret(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClientInterface)(nil).GetSecret), ctx, name)
}

// GetUserKubeconfig mocks base method.
func (m *MockClientInterface) GetUserKubeconfig(ctx context.Context, usernameSlug string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserKubeconfig", ctx, usernameSlug)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserKubeconfig indicates an expected call of GetUserKubeconfig.
func (mr *MockClientInterfaceMockRecorder) GetUserKubeconfig(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserKubeconfig", reflect.TypeOf((*MockClientInterface)(nil).GetUserKubeconfig), ctx, usernameSlug)
}

// GetUserSSHKeyPublic mocks base method.
func (m *MockClientInterface) GetUserSSHKeyPublic(ctx context.Context, usernameSlug string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSSHKeyPublic", ctx, usernameSlug)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSSHKeyPublic indicates an expected call of GetUserSSHKeyPublic.
func (mr *MockClientInterfaceMockRecorder) GetUserSSHKeyPublic(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSSHKeyPublic", reflect.TypeOf((*MockClientInterface)(nil).GetUserSSHKeyPublic), ctx, usernameSlug)
}

// GetUserSSHKeySecret mocks base method.
func (m *MockClientInterface) GetUserSSHKeySecret(ctx context.Context, usernameSlug string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSSHKeySecret", ctx, usernameSlug)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSSHKeySecret indicates an expected call of GetUserSSHKeySecret.
func (mr *MockClientInterfaceMockRecorder) GetUserSSHKeySecret(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSSHKeySecret", reflect.TypeOf((*MockClientInterface)(nil).GetUserSSHKeySecret), ctx, usernameSlug)
}

// GetUserServiceAccount mocks base method.
func (m *MockClientInterface) GetUserServiceAccount(ctx context.Context, usernameSlug string) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserServiceAccount", ctx, usernameSlug)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserServiceAccount indicates an expected call of GetUserServiceAccount.
func (mr *MockClientInterfaceMockRecorder) GetUserServiceAccount(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserServiceAccount", reflect.TypeOf((*MockClientInterface)(nil).GetUserServiceAccount), ctx, usernameSlug)
}

// IsUserToolPODRunning mocks base method.
func (m *MockClientInterface) IsUserToolPODRunning(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserToolPODRunning", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserToolPODRunning indicates an expected call of IsUserToolPODRunning.
func (mr *MockClientInterfaceMockRecorder) IsUserToolPODRunning(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserToolPODRunning", reflect.TypeOf((*MockClientInterface)(nil).IsUserToolPODRunning), ctx, username)
}

// ListKDLProjectsNameCR mocks base method.
func (m *MockClientInterface) ListKDLProjectsNameCR(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKDLProjectsNameCR", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKDLProjectsNameCR indicates an expected call of ListKDLProjectsNameCR.
func (mr *MockClientInterfaceMockRecorder) ListKDLProjectsNameCR(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKDLProjectsNameCR", reflect.TypeOf((*MockClientInterface)(nil).ListKDLProjectsNameCR), ctx)
}

// ListKDLUserToolsCR mocks base method.
func (m *MockClientInterface) ListKDLUserToolsCR(ctx context.Context) ([]unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKDLUserToolsCR", ctx)
	ret0, _ := ret[0].([]unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKDLUserToolsCR indicates an expected call of ListKDLUserToolsCR.
func (mr *MockClientInterfaceMockRecorder) ListKDLUserToolsCR(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKDLUserToolsCR", reflect.TypeOf((*MockClientInterface)(nil).ListKDLUserToolsCR), ctx)
}

// UpdateKDLProjectsCR mocks base method.
func (m *MockClientInterface) UpdateKDLProjectsCR(ctx context.Context, projectID string, crd *map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKDLProjectsCR", ctx, projectID, crd)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKDLProjectsCR indicates an expected call of UpdateKDLProjectsCR.
func (mr *MockClientInterfaceMockRecorder) UpdateKDLProjectsCR(ctx, projectID, crd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKDLProjectsCR", reflect.TypeOf((*MockClientInterface)(nil).UpdateKDLProjectsCR), ctx, projectID, crd)
}

// UpdateKDLUserToolsCR mocks base method.
func (m *MockClientInterface) UpdateKDLUserToolsCR(ctx context.Context, resourceName string, data UserToolsData, crd *map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKDLUserToolsCR", ctx, resourceName, data, crd)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKDLUserToolsCR indicates an expected call of UpdateKDLUserToolsCR.
func (mr *MockClientInterfaceMockRecorder) UpdateKDLUserToolsCR(ctx, resourceName, data, crd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKDLUserToolsCR", reflect.TypeOf((*MockClientInterface)(nil).UpdateKDLUserToolsCR), ctx, resourceName, data, crd)
}

// UpdateSecret mocks base method.
func (m *MockClientInterface) UpdateSecret(ctx context.Context, name string, values, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, name, values, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockClientInterfaceMockRecorder) UpdateSecret(ctx, name, values, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockClientInterface)(nil).UpdateSecret), ctx, name, values, labels)
}

// UpdateUserSSHKeySecret mocks base method.
func (m *MockClientInterface) UpdateUserSSHKeySecret(ctx context.Context, user entity.User, public, private string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSSHKeySecret", ctx, user, public, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSSHKeySecret indicates an expected call of UpdateUserSSHKeySecret.
func (mr *MockClientInterfaceMockRecorder) UpdateUserSSHKeySecret(ctx, user, public, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSSHKeySecret", reflect.TypeOf((*MockClientInterface)(nil).UpdateUserSSHKeySecret), ctx, user, public, private)
}
