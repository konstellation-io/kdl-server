// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kdl-server/app/api/entity"
	v1 "k8s.io/api/core/v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateKDLProjectCR mocks base method.
func (m *MockClient) CreateKDLProjectCR(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKDLProjectCR", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKDLProjectCR indicates an expected call of CreateKDLProjectCR.
func (mr *MockClientMockRecorder) CreateKDLProjectCR(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKDLProjectCR", reflect.TypeOf((*MockClient)(nil).CreateKDLProjectCR), ctx, projectID)
}

// CreateSecret mocks base method.
func (m *MockClient) CreateSecret(ctx context.Context, name string, values map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, name, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockClientMockRecorder) CreateSecret(ctx, name, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockClient)(nil).CreateSecret), ctx, name, values)
}

// CreateUserSSHKeySecret mocks base method.
func (m *MockClient) CreateUserSSHKeySecret(ctx context.Context, user entity.User, public, private string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSSHKeySecret", ctx, user, public, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSSHKeySecret indicates an expected call of CreateUserSSHKeySecret.
func (mr *MockClientMockRecorder) CreateUserSSHKeySecret(ctx, user, public, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSSHKeySecret", reflect.TypeOf((*MockClient)(nil).CreateUserSSHKeySecret), ctx, user, public, private)
}

// CreateUserServiceAccount mocks base method.
func (m *MockClient) CreateUserServiceAccount(ctx context.Context, usernameSlug string) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserServiceAccount", ctx, usernameSlug)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserServiceAccount indicates an expected call of CreateUserServiceAccount.
func (mr *MockClientMockRecorder) CreateUserServiceAccount(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserServiceAccount", reflect.TypeOf((*MockClient)(nil).CreateUserServiceAccount), ctx, usernameSlug)
}

// CreateUserToolsCR mocks base method.
func (m *MockClient) CreateUserToolsCR(ctx context.Context, username, runtimeID, runtimeImage, runtimeTag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToolsCR", ctx, username, runtimeID, runtimeImage, runtimeTag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserToolsCR indicates an expected call of CreateUserToolsCR.
func (mr *MockClientMockRecorder) CreateUserToolsCR(ctx, username, runtimeID, runtimeImage, runtimeTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToolsCR", reflect.TypeOf((*MockClient)(nil).CreateUserToolsCR), ctx, username, runtimeID, runtimeImage, runtimeTag)
}

// DeleteUserServiceAccount mocks base method.
func (m *MockClient) DeleteUserServiceAccount(ctx context.Context, usernameSlug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserServiceAccount", ctx, usernameSlug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserServiceAccount indicates an expected call of DeleteUserServiceAccount.
func (mr *MockClientMockRecorder) DeleteUserServiceAccount(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserServiceAccount", reflect.TypeOf((*MockClient)(nil).DeleteUserServiceAccount), ctx, usernameSlug)
}

// DeleteUserToolsCR mocks base method.
func (m *MockClient) DeleteUserToolsCR(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserToolsCR", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserToolsCR indicates an expected call of DeleteUserToolsCR.
func (mr *MockClientMockRecorder) DeleteUserToolsCR(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserToolsCR", reflect.TypeOf((*MockClient)(nil).DeleteUserToolsCR), ctx, username)
}

// GetRuntimeIDFromUserTools mocks base method.
func (m *MockClient) GetRuntimeIDFromUserTools(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeIDFromUserTools", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeIDFromUserTools indicates an expected call of GetRuntimeIDFromUserTools.
func (mr *MockClientMockRecorder) GetRuntimeIDFromUserTools(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeIDFromUserTools", reflect.TypeOf((*MockClient)(nil).GetRuntimeIDFromUserTools), ctx, username)
}

// GetSecret mocks base method.
func (m *MockClient) GetSecret(ctx context.Context, name string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, name)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientMockRecorder) GetSecret(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClient)(nil).GetSecret), ctx, name)
}

// GetUserKubeconfig mocks base method.
func (m *MockClient) GetUserKubeconfig(ctx context.Context, usernameSlug string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserKubeconfig", ctx, usernameSlug)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserKubeconfig indicates an expected call of GetUserKubeconfig.
func (mr *MockClientMockRecorder) GetUserKubeconfig(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserKubeconfig", reflect.TypeOf((*MockClient)(nil).GetUserKubeconfig), ctx, usernameSlug)
}

// GetUserSSHKeyPublic mocks base method.
func (m *MockClient) GetUserSSHKeyPublic(ctx context.Context, usernameSlug string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSSHKeyPublic", ctx, usernameSlug)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSSHKeyPublic indicates an expected call of GetUserSSHKeyPublic.
func (mr *MockClientMockRecorder) GetUserSSHKeyPublic(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSSHKeyPublic", reflect.TypeOf((*MockClient)(nil).GetUserSSHKeyPublic), ctx, usernameSlug)
}

// GetUserSSHKeySecret mocks base method.
func (m *MockClient) GetUserSSHKeySecret(ctx context.Context, usernameSlug string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSSHKeySecret", ctx, usernameSlug)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSSHKeySecret indicates an expected call of GetUserSSHKeySecret.
func (mr *MockClientMockRecorder) GetUserSSHKeySecret(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSSHKeySecret", reflect.TypeOf((*MockClient)(nil).GetUserSSHKeySecret), ctx, usernameSlug)
}

// GetUserServiceAccount mocks base method.
func (m *MockClient) GetUserServiceAccount(ctx context.Context, usernameSlug string) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserServiceAccount", ctx, usernameSlug)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserServiceAccount indicates an expected call of GetUserServiceAccount.
func (mr *MockClientMockRecorder) GetUserServiceAccount(ctx, usernameSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserServiceAccount", reflect.TypeOf((*MockClient)(nil).GetUserServiceAccount), ctx, usernameSlug)
}

// IsUserToolPODRunning mocks base method.
func (m *MockClient) IsUserToolPODRunning(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserToolPODRunning", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserToolPODRunning indicates an expected call of IsUserToolPODRunning.
func (mr *MockClientMockRecorder) IsUserToolPODRunning(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserToolPODRunning", reflect.TypeOf((*MockClient)(nil).IsUserToolPODRunning), ctx, username)
}

// UpdateSecret mocks base method.
func (m *MockClient) UpdateSecret(ctx context.Context, name string, values map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, name, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockClientMockRecorder) UpdateSecret(ctx, name, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockClient)(nil).UpdateSecret), ctx, name, values)
}

// UpdateUserSSHKeySecret mocks base method.
func (m *MockClient) UpdateUserSSHKeySecret(ctx context.Context, user entity.User, public, private string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSSHKeySecret", ctx, user, public, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSSHKeySecret indicates an expected call of UpdateUserSSHKeySecret.
func (mr *MockClientMockRecorder) UpdateUserSSHKeySecret(ctx, user, public, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSSHKeySecret", reflect.TypeOf((*MockClient)(nil).UpdateUserSSHKeySecret), ctx, user, public, private)
}
