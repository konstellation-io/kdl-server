// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package minioadminservice is a generated GoMock package.
package minioadminservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMinioAdminInterface is a mock of MinioAdminInterface interface.
type MockMinioAdminInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMinioAdminInterfaceMockRecorder
}

// MockMinioAdminInterfaceMockRecorder is the mock recorder for MockMinioAdminInterface.
type MockMinioAdminInterfaceMockRecorder struct {
	mock *MockMinioAdminInterface
}

// NewMockMinioAdminInterface creates a new mock instance.
func NewMockMinioAdminInterface(ctrl *gomock.Controller) *MockMinioAdminInterface {
	mock := &MockMinioAdminInterface{ctrl: ctrl}
	mock.recorder = &MockMinioAdminInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioAdminInterface) EXPECT() *MockMinioAdminInterfaceMockRecorder {
	return m.recorder
}

// AssignPolicy mocks base method.
func (m *MockMinioAdminInterface) AssignPolicy(ctx context.Context, accessKey, policyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPolicy", ctx, accessKey, policyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPolicy indicates an expected call of AssignPolicy.
func (mr *MockMinioAdminInterfaceMockRecorder) AssignPolicy(ctx, accessKey, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPolicy", reflect.TypeOf((*MockMinioAdminInterface)(nil).AssignPolicy), ctx, accessKey, policyName)
}

// CreateUser mocks base method.
func (m *MockMinioAdminInterface) CreateUser(ctx context.Context, accessKey, secretKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, accessKey, secretKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMinioAdminInterfaceMockRecorder) CreateUser(ctx, accessKey, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMinioAdminInterface)(nil).CreateUser), ctx, accessKey, secretKey)
}

// DeletePolicy mocks base method.
func (m *MockMinioAdminInterface) DeletePolicy(ctx context.Context, policyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", ctx, policyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockMinioAdminInterfaceMockRecorder) DeletePolicy(ctx, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockMinioAdminInterface)(nil).DeletePolicy), ctx, policyName)
}

// DeleteUser mocks base method.
func (m *MockMinioAdminInterface) DeleteUser(ctx context.Context, accessKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, accessKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMinioAdminInterfaceMockRecorder) DeleteUser(ctx, accessKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMinioAdminInterface)(nil).DeleteUser), ctx, accessKey)
}

// UpdatePolicy mocks base method.
func (m *MockMinioAdminInterface) UpdatePolicy(ctx context.Context, policyName string, bucketNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", ctx, policyName, bucketNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockMinioAdminInterfaceMockRecorder) UpdatePolicy(ctx, policyName, bucketNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockMinioAdminInterface)(nil).UpdatePolicy), ctx, policyName, bucketNames)
}
