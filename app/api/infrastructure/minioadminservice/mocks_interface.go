// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package minioadminservice is a generated GoMock package.
package minioadminservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMinioAdminInterface is a mock of MinioAdminInterface interface.
type MockMinioAdminInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMinioAdminInterfaceMockRecorder
}

// MockMinioAdminInterfaceMockRecorder is the mock recorder for MockMinioAdminInterface.
type MockMinioAdminInterfaceMockRecorder struct {
	mock *MockMinioAdminInterface
}

// NewMockMinioAdminInterface creates a new mock instance.
func NewMockMinioAdminInterface(ctrl *gomock.Controller) *MockMinioAdminInterface {
	mock := &MockMinioAdminInterface{ctrl: ctrl}
	mock.recorder = &MockMinioAdminInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioAdminInterface) EXPECT() *MockMinioAdminInterfaceMockRecorder {
	return m.recorder
}

// CreateProjectPolicy mocks base method.
func (m *MockMinioAdminInterface) CreateProjectPolicy(ctx context.Context, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectPolicy", ctx, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProjectPolicy indicates an expected call of CreateProjectPolicy.
func (mr *MockMinioAdminInterfaceMockRecorder) CreateProjectPolicy(ctx, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectPolicy", reflect.TypeOf((*MockMinioAdminInterface)(nil).CreateProjectPolicy), ctx, projectName)
}

// CreateProjectUser mocks base method.
func (m *MockMinioAdminInterface) CreateProjectUser(ctx context.Context, projectName, secretKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectUser", ctx, projectName, secretKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectUser indicates an expected call of CreateProjectUser.
func (mr *MockMinioAdminInterfaceMockRecorder) CreateProjectUser(ctx, projectName, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectUser", reflect.TypeOf((*MockMinioAdminInterface)(nil).CreateProjectUser), ctx, projectName, secretKey)
}

// CreateUser mocks base method.
func (m *MockMinioAdminInterface) CreateUser(ctx context.Context, userSlug, secretKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userSlug, secretKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMinioAdminInterfaceMockRecorder) CreateUser(ctx, userSlug, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMinioAdminInterface)(nil).CreateUser), ctx, userSlug, secretKey)
}

// DeleteProjectPolicy mocks base method.
func (m *MockMinioAdminInterface) DeleteProjectPolicy(ctx context.Context, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectPolicy", ctx, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectPolicy indicates an expected call of DeleteProjectPolicy.
func (mr *MockMinioAdminInterfaceMockRecorder) DeleteProjectPolicy(ctx, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectPolicy", reflect.TypeOf((*MockMinioAdminInterface)(nil).DeleteProjectPolicy), ctx, projectName)
}

// DeleteProjectUser mocks base method.
func (m *MockMinioAdminInterface) DeleteProjectUser(ctx context.Context, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectUser", ctx, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectUser indicates an expected call of DeleteProjectUser.
func (mr *MockMinioAdminInterfaceMockRecorder) DeleteProjectUser(ctx, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectUser", reflect.TypeOf((*MockMinioAdminInterface)(nil).DeleteProjectUser), ctx, projectName)
}

// DeleteUser mocks base method.
func (m *MockMinioAdminInterface) DeleteUser(ctx context.Context, userSlug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userSlug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMinioAdminInterfaceMockRecorder) DeleteUser(ctx, userSlug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMinioAdminInterface)(nil).DeleteUser), ctx, userSlug)
}

// JoinProject mocks base method.
func (m *MockMinioAdminInterface) JoinProject(ctx context.Context, userSlug, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinProject", ctx, userSlug, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinProject indicates an expected call of JoinProject.
func (mr *MockMinioAdminInterfaceMockRecorder) JoinProject(ctx, userSlug, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinProject", reflect.TypeOf((*MockMinioAdminInterface)(nil).JoinProject), ctx, userSlug, projectName)
}

// LeaveProject mocks base method.
func (m *MockMinioAdminInterface) LeaveProject(ctx context.Context, userSlug, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveProject", ctx, userSlug, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveProject indicates an expected call of LeaveProject.
func (mr *MockMinioAdminInterfaceMockRecorder) LeaveProject(ctx, userSlug, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveProject", reflect.TypeOf((*MockMinioAdminInterface)(nil).LeaveProject), ctx, userSlug, projectName)
}
