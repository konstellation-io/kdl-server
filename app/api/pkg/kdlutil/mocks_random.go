// Code generated by MockGen. DO NOT EDIT.
// Source: random.go

// Package kdlutil is a generated GoMock package.
package kdlutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomGenerator is a mock of RandomGenerator interface.
type MockRandomGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomGeneratorMockRecorder
}

// MockRandomGeneratorMockRecorder is the mock recorder for MockRandomGenerator.
type MockRandomGeneratorMockRecorder struct {
	mock *MockRandomGenerator
}

// NewMockRandomGenerator creates a new mock instance.
func NewMockRandomGenerator(ctrl *gomock.Controller) *MockRandomGenerator {
	mock := &MockRandomGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomGenerator) EXPECT() *MockRandomGeneratorMockRecorder {
	return m.recorder
}

// GenerateRandomString mocks base method.
func (m *MockRandomGenerator) GenerateRandomString(n int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomString", n)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomString indicates an expected call of GenerateRandomString.
func (mr *MockRandomGeneratorMockRecorder) GenerateRandomString(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomString", reflect.TypeOf((*MockRandomGenerator)(nil).GenerateRandomString), n)
}
