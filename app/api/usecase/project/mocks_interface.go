// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package project is a generated GoMock package.
package project

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kdl-server/app/api/entity"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddMembers mocks base method.
func (m *MockRepository) AddMembers(ctx context.Context, projectID string, members []entity.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMembers", ctx, projectID, members)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMembers indicates an expected call of AddMembers.
func (mr *MockRepositoryMockRecorder) AddMembers(ctx, projectID, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockRepository)(nil).AddMembers), ctx, projectID, members)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, project entity.Project) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, project)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, project)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context) ([]entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// RemoveMembers mocks base method.
func (m *MockRepository) RemoveMembers(ctx context.Context, projectID string, users []entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMembers", ctx, projectID, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockRepositoryMockRecorder) RemoveMembers(ctx, projectID, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockRepository)(nil).RemoveMembers), ctx, projectID, users)
}

// UpdateArchived mocks base method.
func (m *MockRepository) UpdateArchived(ctx context.Context, projectID string, archived bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchived", ctx, projectID, archived)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArchived indicates an expected call of UpdateArchived.
func (mr *MockRepositoryMockRecorder) UpdateArchived(ctx, projectID, archived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchived", reflect.TypeOf((*MockRepository)(nil).UpdateArchived), ctx, projectID, archived)
}

// UpdateDescription mocks base method.
func (m *MockRepository) UpdateDescription(ctx context.Context, projectID, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDescription", ctx, projectID, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDescription indicates an expected call of UpdateDescription.
func (mr *MockRepositoryMockRecorder) UpdateDescription(ctx, projectID, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescription", reflect.TypeOf((*MockRepository)(nil).UpdateDescription), ctx, projectID, description)
}

// UpdateMembersAccessLevel mocks base method.
func (m *MockRepository) UpdateMembersAccessLevel(ctx context.Context, projectID string, users []entity.User, accessLevel entity.AccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMembersAccessLevel", ctx, projectID, users, accessLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMembersAccessLevel indicates an expected call of UpdateMembersAccessLevel.
func (mr *MockRepositoryMockRecorder) UpdateMembersAccessLevel(ctx, projectID, users, accessLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembersAccessLevel", reflect.TypeOf((*MockRepository)(nil).UpdateMembersAccessLevel), ctx, projectID, users, accessLevel)
}

// UpdateName mocks base method.
func (m *MockRepository) UpdateName(ctx context.Context, projectID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, projectID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockRepositoryMockRecorder) UpdateName(ctx, projectID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockRepository)(nil).UpdateName), ctx, projectID, name)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddMembers mocks base method.
func (m *MockUseCase) AddMembers(ctx context.Context, opt AddMembersOption) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMembers", ctx, opt)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMembers indicates an expected call of AddMembers.
func (mr *MockUseCaseMockRecorder) AddMembers(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockUseCase)(nil).AddMembers), ctx, opt)
}

// Create mocks base method.
func (m *MockUseCase) Create(ctx context.Context, opt CreateProjectOption) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, opt)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), ctx, opt)
}

// FindAll mocks base method.
func (m *MockUseCase) FindAll(ctx context.Context) ([]entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUseCaseMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUseCase)(nil).FindAll), ctx)
}

// GetByID mocks base method.
func (m *MockUseCase) GetByID(ctx context.Context, id string) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUseCaseMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUseCase)(nil).GetByID), ctx, id)
}

// RemoveMembers mocks base method.
func (m *MockUseCase) RemoveMembers(ctx context.Context, opt RemoveMembersOption) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMembers", ctx, opt)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMembers indicates an expected call of RemoveMembers.
func (mr *MockUseCaseMockRecorder) RemoveMembers(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMembers", reflect.TypeOf((*MockUseCase)(nil).RemoveMembers), ctx, opt)
}

// Update mocks base method.
func (m *MockUseCase) Update(ctx context.Context, opt UpdateProjectOption) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, opt)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUseCaseMockRecorder) Update(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), ctx, opt)
}

// UpdateMembers mocks base method.
func (m *MockUseCase) UpdateMembers(ctx context.Context, opt UpdateMembersOption) (entity.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMembers", ctx, opt)
	ret0, _ := ret[0].(entity.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMembers indicates an expected call of UpdateMembers.
func (mr *MockUseCaseMockRecorder) UpdateMembers(ctx, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembers", reflect.TypeOf((*MockUseCase)(nil).UpdateMembers), ctx, opt)
}
