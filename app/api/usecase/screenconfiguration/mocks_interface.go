// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package screenconfiguration is a generated GoMock package.
package screenconfiguration

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kdl-server/app/api/entity"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCreateProjectSettings mocks base method.
func (m *MockRepository) CreateCreateProjectSettings(ctx context.Context, set entity.CreateProjectSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreateProjectSettings", ctx, set)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreateProjectSettings indicates an expected call of CreateCreateProjectSettings.
func (mr *MockRepositoryMockRecorder) CreateCreateProjectSettings(ctx, set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreateProjectSettings", reflect.TypeOf((*MockRepository)(nil).CreateCreateProjectSettings), ctx, set)
}

// GetCreateProjectSettings mocks base method.
func (m *MockRepository) GetCreateProjectSettings(ctx context.Context) (entity.CreateProjectSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateProjectSettings", ctx)
	ret0, _ := ret[0].(entity.CreateProjectSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateProjectSettings indicates an expected call of GetCreateProjectSettings.
func (mr *MockRepositoryMockRecorder) GetCreateProjectSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateProjectSettings", reflect.TypeOf((*MockRepository)(nil).GetCreateProjectSettings), ctx)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetCreateProjectSettings mocks base method.
func (m *MockUseCase) GetCreateProjectSettings(ctx context.Context) (entity.CreateProjectSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateProjectSettings", ctx)
	ret0, _ := ret[0].(entity.CreateProjectSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateProjectSettings indicates an expected call of GetCreateProjectSettings.
func (mr *MockUseCaseMockRecorder) GetCreateProjectSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateProjectSettings", reflect.TypeOf((*MockUseCase)(nil).GetCreateProjectSettings), ctx)
}
