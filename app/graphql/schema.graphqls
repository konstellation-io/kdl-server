# This schema.graphqls file uses the following sorting criteria:
# 1. Queries (alphabetical order)
# 2. Mutations (grouped by returned type, then alphabetical order)
# 3. Types and Enums (apparicion order in schema.graphqls)
# 3.1  Types that are contained within other types are to be under the parent type


type Query {
  capabilities: [Capability!]!
  kubeconfig: String!
  me: User!
  project(id: ID!): Project!
  projects: [Project!]!
  qualityProjectDesc(description: String!): QualityProjectDesc!
  runningCapability: Capability
  runningRuntime: Runtime
  runtimes: [Runtime!]!
  users: [User!]!
}

type Mutation {
  regenerateSSHKey: User!
  setActiveUserTools(input: SetActiveUserToolsInput!): User!
  updateAccessLevel(input: UpdateAccessLevelInput!): [User!]!

  addMembers(input: AddMembersInput!): Project!
  createProject(input: CreateProjectInput!): Project!
  deleteProject(input: DeleteProjectInput!): Project
  removeMembers(input: RemoveMembersInput!): Project!
  updateMembers(input: UpdateMembersInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!

  addApiToken(input: ApiTokenInput): ApiToken
  removeApiToken(input: RemoveApiTokenInput): ApiToken!

  synchronizeUsersData(input: SyncUsersDataInput): Boolean
}

type Capability {
  id: ID!
  name: String!
  default: Boolean!
}

type User {
  id: ID!
  username: String!
  email: String!
  creationDate: String!
  accessLevel: AccessLevel!
  lastActivity: String
  apiTokens: [ApiToken!]!
  isKubeconfigEnabled: Boolean!
  sshKey: SSHKey!
}

enum AccessLevel {
  VIEWER
  MANAGER
  ADMIN
}


type ApiToken {
  id: ID!
  name: String!
  creationDate: String!
  lastUsedDate: String!
  token: String!
}

type SSHKey {
  public: String!
  private: String!
  creationDate: String!
  lastActivity: String
}

type Project {
  id: ID!
  name: String!
  description: String!
  favorite: Boolean!
  repository: Repository
  creationDate: String!
  lastActivationDate: String!
  error: String
  members: [Member!]!
  toolUrls: ToolUrls!
  needAccess: Boolean!
  archived: Boolean!
  minioAccessKey: MinioAccessKey!
}

type Repository {
  url: String!
  error: String
}

type Member {
  user: User!
  accessLevel: AccessLevel!
  addedDate: String!
}

type MinioAccessKey {
  accessKey: String!
  secretKey: String!
}

type ToolUrls {
  knowledgeGalaxyEnabled: Boolean!
  knowledgeGalaxy: String!
  filebrowser: String!
  mlflow: String!
  minio: String!
}

type QualityProjectDesc {
  quality: Int!
}

type Runtime {
  id: ID!
  name: String!
  desc: String!
  labels: [String!]
  dockerImage: String!
  dockerTag: String!
  runtimePod: String!
  runtimePodStatus: PodStatus!
}

enum PodStatus {
  pending
  running
  failed
}

input SetActiveUserToolsInput {
  active: Boolean!,
  runtimeId: String,
  capabilitiesId: String
}

input UpdateAccessLevelInput {
  userIds: [ID!]!
  accessLevel: AccessLevel!
}

input AddMembersInput {
  projectId: ID!
  userIds: [ID!]!
}

input CreateProjectInput {
  id: ID!
  name: String!
  description: String!
  repository: RepositoryInput!
}

input RepositoryInput {
  url: String!
  username: String!
}

input DeleteProjectInput {
  id: ID!
}

input RemoveMembersInput {
  projectId: ID!
  userIds: [ID!]!
}

input UpdateMembersInput {
  projectId: ID!
  userIds: [ID!]!
  accessLevel: AccessLevel!
}

input UpdateProjectInput {
  id: ID!
  name: String
  description: String
  archived: Boolean
}

input ApiTokenInput {
  userId: ID!
  name: String
}

input RemoveApiTokenInput {
  apiTokenId: ID!
}

input SyncUsersDataInput{
  serviceAccount: Boolean!
  sshKeys: Boolean!
  minioUser: Boolean!
  userIds: [ID!]!
}
