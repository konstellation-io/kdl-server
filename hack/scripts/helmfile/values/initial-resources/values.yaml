resources:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: project-proxy-nginx-config
    type: Opaque
    data:
      nginx.conf: |-
        user  nginx;
        worker_processes  1;
        error_log  /var/log/nginx/error.log warn;
        pid        /var/run/nginx.pid;
        events {
            worker_connections  1024;
        }
        http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';
          access_log  /var/log/nginx/access.log  main;
          sendfile        on;
          keepalive_timeout  65;

          server {
            listen 9000;
            resolver kube-dns.kube-system.svc.cluster.local valid=5s;
            client_max_body_size 1000000M;

            location = /auth {
                internal;
                proxy_pass              http://kdl-local-server:80/api/auth/project;
                proxy_pass_request_body off;
                proxy_set_header        Content-Length "";
                proxy_set_header        X-Original-URI $request_uri;
            }

            location ~ ^/mlflow/([^/]+)/(.*)$ {
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                proxy_pass http://$1-mlflow.kdl.svc.cluster.local:5000/$2$is_args$args;
            }

            location ~ ^/filebrowser/([^/]+)/(.*)$ {
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                set $query $2;
                proxy_pass http://$1-filebrowser.kdl.svc.cluster.local:9696/$query$is_args$args;
            }

            location ~ ^/kg/(api|static)/(.*)$ {
                proxy_pass http://knowledge-galaxy.kdl.svc.cluster.local:8080/kg/$1/$2$is_args$args;
            }

            location ~ ^/kg/(favicon.ico|config.json)$ {
                proxy_pass http://knowledge-galaxy.kdl.svc.cluster.local:8080/kg/$1;
            }

            location ~ ^/kg/(.*)$ {
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                proxy_pass http://knowledge-galaxy.kdl.svc.cluster.local:8080/kg/$1$is_args$args;
            }
          }
        }


  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: keycloak-initial-realm
    type: Opaque
    data:
      initial-realm.json: |-
        {
          "id": "2e5b3724-86ea-480f-99e4-11de3859d102",
          "realm": "kdl",
          "notBefore": 0,
          "defaultSignatureAlgorithm": "RS256",
          "revokeRefreshToken": false,
          "refreshTokenMaxReuse": 0,
          "accessTokenLifespan": 300,
          "accessTokenLifespanForImplicitFlow": 900,
          "ssoSessionIdleTimeout": 1800,
          "ssoSessionMaxLifespan": 36000,
          "ssoSessionIdleTimeoutRememberMe": 0,
          "ssoSessionMaxLifespanRememberMe": 0,
          "offlineSessionIdleTimeout": 2592000,
          "offlineSessionMaxLifespanEnabled": false,
          "offlineSessionMaxLifespan": 5184000,
          "clientSessionIdleTimeout": 0,
          "clientSessionMaxLifespan": 0,
          "clientOfflineSessionIdleTimeout": 0,
          "clientOfflineSessionMaxLifespan": 0,
          "accessCodeLifespan": 60,
          "accessCodeLifespanUserAction": 300,
          "accessCodeLifespanLogin": 1800,
          "actionTokenGeneratedByAdminLifespan": 43200,
          "actionTokenGeneratedByUserLifespan": 300,
          "oauth2DeviceCodeLifespan": 600,
          "oauth2DevicePollingInterval": 5,
          "enabled": true,
          "sslRequired": "external",
          "registrationAllowed": false,
          "registrationEmailAsUsername": false,
          "rememberMe": false,
          "verifyEmail": false,
          "loginWithEmailAllowed": true,
          "duplicateEmailsAllowed": false,
          "resetPasswordAllowed": false,
          "editUsernameAllowed": false,
          "bruteForceProtected": false,
          "permanentLockout": false,
          "maxTemporaryLockouts": 0,
          "maxFailureWaitSeconds": 900,
          "minimumQuickLoginWaitSeconds": 60,
          "waitIncrementSeconds": 60,
          "quickLoginCheckMilliSeconds": 1000,
          "maxDeltaTimeSeconds": 43200,
          "failureFactor": 30,
          "defaultRole": {
            "id": "f6b33111-9f52-443c-8617-2e94e11d285c",
            "name": "default-roles-kdl",
            "description": "${role_default-roles}",
            "composite": true,
            "clientRole": false,
            "containerId": "2e5b3724-86ea-480f-99e4-11de3859d102"
          },
          "requiredCredentials": [
            "password"
          ],
          "otpPolicyType": "totp",
          "otpPolicyAlgorithm": "HmacSHA1",
          "otpPolicyInitialCounter": 0,
          "otpPolicyDigits": 6,
          "otpPolicyLookAheadWindow": 1,
          "otpPolicyPeriod": 30,
          "otpPolicyCodeReusable": false,
          "otpSupportedApplications": [
            "totpAppFreeOTPName",
            "totpAppGoogleName",
            "totpAppMicrosoftAuthenticatorName"
          ],
          "localizationTexts": {},
          "webAuthnPolicyRpEntityName": "keycloak",
          "webAuthnPolicySignatureAlgorithms": [
            "ES256",
            "RS256"
          ],
          "webAuthnPolicyRpId": "",
          "webAuthnPolicyAttestationConveyancePreference": "not specified",
          "webAuthnPolicyAuthenticatorAttachment": "not specified",
          "webAuthnPolicyRequireResidentKey": "not specified",
          "webAuthnPolicyUserVerificationRequirement": "not specified",
          "webAuthnPolicyCreateTimeout": 0,
          "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
          "webAuthnPolicyAcceptableAaguids": [],
          "webAuthnPolicyExtraOrigins": [],
          "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
          "webAuthnPolicyPasswordlessSignatureAlgorithms": [
            "ES256",
            "RS256"
          ],
          "webAuthnPolicyPasswordlessRpId": "",
          "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
          "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
          "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
          "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
          "webAuthnPolicyPasswordlessCreateTimeout": 0,
          "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
          "webAuthnPolicyPasswordlessAcceptableAaguids": [],
          "webAuthnPolicyPasswordlessExtraOrigins": [],
          "users": [
            {
              "id": "b82958c8-cb45-4899-a811-1f2f057986aa",
              "username": "service-account-proxy",
              "emailVerified": false,
              "createdTimestamp": 1731508294804,
              "enabled": true,
              "totp": false,
              "serviceAccountClientId": "proxy",
              "disableableCredentialTypes": [],
              "requiredActions": [],
              "notBefore": 0
            }
          ],
          "scopeMappings": [
            {
              "clientScope": "offline_access",
              "roles": [
                "offline_access"
              ]
            }
          ],
          "clientScopeMappings": {
            "account": [
              {
                "client": "account-console",
                "roles": [
                  "manage-account",
                  "view-groups"
                ]
              }
            ]
          },
          "clients": [
            {
              "id": "798f9ad9-3847-46dd-81aa-c31067a6f603",
              "clientId": "account",
              "name": "${client_account}",
              "rootUrl": "${authBaseUrl}",
              "baseUrl": "/realms/kdl/account/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": false,
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [
                "/realms/kdl/account/*"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "false",
                "post.logout.redirect.uris": "+"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "73f1afcf-43f7-4724-af86-2f2e0ac77a5d",
              "clientId": "account-console",
              "name": "${client_account-console}",
              "rootUrl": "${authBaseUrl}",
              "baseUrl": "/realms/kdl/account/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": false,
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [
                "/realms/kdl/account/*"
              ],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "false",
                "post.logout.redirect.uris": "+",
                "pkce.code.challenge.method": "S256"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "09f31d91-78c9-4f6c-9c67-0e71d659e2bd",
                  "name": "audience resolve",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-resolve-mapper",
                  "consentRequired": false,
                  "config": {}
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "9920a972-779c-4bfc-bf5a-9a60f0abeb48",
              "clientId": "admin-cli",
              "name": "${client_admin-cli}",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": false,
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": true,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "false",
                "client.use.lightweight.access.token.enabled": "true"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "35e6ac93-4b1b-481a-8ebc-e233c9891fb6",
              "clientId": "broker",
              "name": "${client_broker}",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": false,
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": true,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "true"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "clientId": "minio",
              "name": "MinIO client",
              "description": "",
              "rootUrl": "https://minio-console.kdl.10.0.1.1.nip.io/",
              "adminUrl": "https://minio-console.kdl.10.0.1.1.nip.io/",
              "baseUrl": "",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "minio123456",
              "redirectUris": [
                "https://minio-console.kdl.10.0.1.1.nip.io/oauth_callback"
              ],
              "webOrigins": [
                "*"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": true,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "false",
                "oidc.ciba.grant.enabled": "false",
                "client.secret.creation.time": "1733141642",
                "backchannel.logout.session.required": "true",
                "post.logout.redirect.uris": "+",
                "display.on.consent.screen": "false",
                "oauth2.device.authorization.grant.enabled": "false",
                "backchannel.logout.revoke.offline.tokens": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "e8b15cab-eb5a-4bad-a93f-b78bead3f753",
                  "name": "email to policy",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "lightweight.claim": "false",
                    "access.token.claim": "true",
                    "claim.name": "policy",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ],
              "access": {
                "view": true,
                "configure": true,
                "manage": true
              }
            },
            {
              "id": "07ef6dca-5bcb-49a1-9b28-a4a9b7a52500",
              "clientId": "proxy",
              "name": "KDL OAuth2Proxy",
              "description": "",
              "rootUrl": "https://kdlapp.kdl.10.0.1.1.nip.io",
              "adminUrl": "",
              "baseUrl": "https://kdlapp.kdl.10.0.1.1.nip.io/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": true,
              "clientAuthenticatorType": "client-secret",
              "secret": "proxy654321",
              "redirectUris": [
                "https://kdlapp.kdl.10.0.1.1.nip.io/oauth2/callback"
              ],
              "webOrigins": [
                "*"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": true,
              "authorizationServicesEnabled": true,
              "publicClient": false,
              "frontchannelLogout": true,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "false",
                "oidc.ciba.grant.enabled": "false",
                "client.secret.creation.time": "1731448442",
                "backchannel.logout.session.required": "true",
                "post.logout.redirect.uris": "+",
                "oauth2.device.authorization.grant.enabled": "false",
                "display.on.consent.screen": "false",
                "backchannel.logout.revoke.offline.tokens": "false"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": -1,
              "protocolMappers": [
                {
                  "id": "16dbec2a-8d2f-466e-9e9f-aca072c08294",
                  "name": "aud-mapper-proxy",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-mapper",
                  "consentRequired": false,
                  "config": {
                    "included.client.audience": "proxy",
                    "id.token.claim": "true",
                    "lightweight.claim": "false",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "1cdbc3b3-3db5-474f-b573-2c1fa6d5afe1",
              "clientId": "realm-management",
              "name": "${client_realm-management}",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": false,
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [],
              "webOrigins": [],
              "notBefore": 0,
              "bearerOnly": true,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": false,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "true"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": false,
              "nodeReRegistrationTimeout": 0,
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            },
            {
              "id": "f05de5ec-85fe-400e-8a1f-d29144b952d2",
              "clientId": "security-admin-console",
              "name": "${client_security-admin-console}",
              "rootUrl": "${authAdminUrl}",
              "baseUrl": "/admin/kdl/console/",
              "surrogateAuthRequired": false,
              "enabled": true,
              "alwaysDisplayInConsole": false,
              "clientAuthenticatorType": "client-secret",
              "redirectUris": [
                "/admin/kdl/console/*"
              ],
              "webOrigins": [
                "+"
              ],
              "notBefore": 0,
              "bearerOnly": false,
              "consentRequired": false,
              "standardFlowEnabled": true,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": false,
              "publicClient": true,
              "frontchannelLogout": false,
              "protocol": "openid-connect",
              "attributes": {
                "realm_client": "false",
                "client.use.lightweight.access.token.enabled": "true",
                "post.logout.redirect.uris": "+",
                "pkce.code.challenge.method": "S256"
              },
              "authenticationFlowBindingOverrides": {},
              "fullScopeAllowed": true,
              "nodeReRegistrationTimeout": 0,
              "protocolMappers": [
                {
                  "id": "bf56d144-6adc-4cc6-86f3-1d01d05ce6e5",
                  "name": "locale",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "locale",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "locale",
                    "jsonType.label": "String"
                  }
                }
              ],
              "defaultClientScopes": [
                "web-origins",
                "acr",
                "roles",
                "profile",
                "basic",
                "email"
              ],
              "optionalClientScopes": [
                "address",
                "phone",
                "organization",
                "offline_access",
                "microprofile-jwt"
              ]
            }
          ],
          "clientScopes": [
            {
              "id": "ac87032b-3c99-4957-83f6-f4d4060e860a",
              "name": "roles",
              "description": "OpenID Connect scope for add user roles to the access token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "consent.screen.text": "${rolesScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "fa2ef148-b328-4055-b595-3c4b2acd3ff8",
                  "name": "realm roles",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-realm-role-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.attribute": "foo",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "realm_access.roles",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                },
                {
                  "id": "cefcb4a5-0ff7-46f2-a941-3cf95cdc2399",
                  "name": "client roles",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-client-role-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.attribute": "foo",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "resource_access.${client_id}.roles",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                },
                {
                  "id": "c7d33aef-5c76-4fbf-ac9e-85e7b14f55f6",
                  "name": "audience resolve",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-audience-resolve-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "access.token.claim": "true"
                  }
                }
              ]
            },
            {
              "id": "effea480-87d8-4552-a198-69b073c23976",
              "name": "microprofile-jwt",
              "description": "Microprofile - JWT built-in scope",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "4f21c624-e55c-44b1-90a0-d8b0c8c03062",
                  "name": "groups",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-realm-role-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "multivalued": "true",
                    "user.attribute": "foo",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "groups",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "fa44d39f-aa5d-4e78-ba56-90ff139f27b9",
                  "name": "upn",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "upn",
                    "jsonType.label": "String"
                  }
                }
              ]
            },
            {
              "id": "be4c4a90-e020-429e-a718-eae10f4bc594",
              "name": "basic",
              "description": "OpenID Connect scope for add all basic claims to the token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "4e58c699-2d8f-40e2-b32d-826768d392dd",
                  "name": "sub",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-sub-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "access.token.claim": "true"
                  }
                },
                {
                  "id": "b8afa0e2-2f45-4b0e-9717-d61d96d053a6",
                  "name": "auth_time",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usersessionmodel-note-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.session.note": "AUTH_TIME",
                    "id.token.claim": "true",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "auth_time",
                    "jsonType.label": "long"
                  }
                }
              ]
            },
            {
              "id": "6faa3fff-89a6-4cdd-8f2d-d0b307491753",
              "name": "phone",
              "description": "OpenID Connect built-in scope: phone",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "consent.screen.text": "${phoneScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "a4acb8c3-485e-458e-a887-a6c6a133cc21",
                  "name": "phone number",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "phoneNumber",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "phone_number",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "9ebed179-e257-4cf6-9d3d-571251890b32",
                  "name": "phone number verified",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "phoneNumberVerified",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "phone_number_verified",
                    "jsonType.label": "boolean"
                  }
                }
              ]
            },
            {
              "id": "899a5a87-8c94-4b11-8130-fa4edb7cd573",
              "name": "acr",
              "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "ba7a89e2-9b14-409c-b1fe-409ac7707757",
                  "name": "acr loa level",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-acr-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true"
                  }
                }
              ]
            },
            {
              "id": "df858a0c-9944-4621-8242-99e9f805f8a1",
              "name": "offline_access",
              "description": "OpenID Connect built-in scope: offline_access",
              "protocol": "openid-connect",
              "attributes": {
                "consent.screen.text": "${offlineAccessScopeConsentText}",
                "display.on.consent.screen": "true"
              }
            },
            {
              "id": "29af01da-53ed-4321-9a0e-917e82e62e04",
              "name": "address",
              "description": "OpenID Connect built-in scope: address",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "consent.screen.text": "${addressScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "b35cbfbb-4ff9-4dbc-b8de-e7ce441d4a0d",
                  "name": "address",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-address-mapper",
                  "consentRequired": false,
                  "config": {
                    "user.attribute.formatted": "formatted",
                    "user.attribute.country": "country",
                    "introspection.token.claim": "true",
                    "user.attribute.postal_code": "postal_code",
                    "userinfo.token.claim": "true",
                    "user.attribute.street": "street",
                    "id.token.claim": "true",
                    "user.attribute.region": "region",
                    "access.token.claim": "true",
                    "user.attribute.locality": "locality"
                  }
                }
              ]
            },
            {
              "id": "61a79de6-9825-4bd6-b68f-de115ef2c9d4",
              "name": "profile",
              "description": "OpenID Connect built-in scope: profile",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "consent.screen.text": "${profileScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "0d7e1255-6224-4a35-a52f-6c275e00a6b5",
                  "name": "nickname",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "nickname",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "nickname",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "f600c6d7-71b1-45dd-b61b-8d484348916d",
                  "name": "website",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "website",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "website",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "d3e0c6c4-f6b8-4a7c-8d0c-56445e21a69d",
                  "name": "middle name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "middleName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "middle_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "4a0efcb5-f14d-4c64-ab55-0a41c44a26ca",
                  "name": "full name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-full-name-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true",
                    "userinfo.token.claim": "true"
                  }
                },
                {
                  "id": "8d8bb92c-d39e-4fe7-8fa2-a172f1a928c8",
                  "name": "picture",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "picture",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "picture",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "980be923-ae04-49c4-b798-507c4483e710",
                  "name": "gender",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "gender",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "gender",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "9331bea5-b171-45a9-bbcb-d4f2f6e7859b",
                  "name": "zoneinfo",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "zoneinfo",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "zoneinfo",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "7755c2aa-fa60-4caa-9d4a-e65eb6911023",
                  "name": "family name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "lastName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "family_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "d38872bb-0ecf-4333-ad18-a6221a12bced",
                  "name": "profile",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "profile",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "profile",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "3fa87d82-7506-4bc1-96ed-c683037e5cd5",
                  "name": "given name",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "firstName",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "given_name",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "2179258d-7bc3-45c0-9ac1-ab4e9321b608",
                  "name": "locale",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "locale",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "locale",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "8359ddc5-b8f1-4317-ba43-f086b4b19f2d",
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "preferred_username",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "5ba53691-bc55-460a-9016-d13f3aebc9c0",
                  "name": "birthdate",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "birthdate",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "birthdate",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "d0aa22df-6b60-4a48-939a-e88362b005d7",
                  "name": "updated at",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "updatedAt",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "updated_at",
                    "jsonType.label": "long"
                  }
                }
              ]
            },
            {
              "id": "5fc194d5-d68e-48c0-88b7-db5ed74435cc",
              "name": "web-origins",
              "description": "OpenID Connect scope for add allowed web origins to the access token",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "false",
                "consent.screen.text": "",
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "efbea366-c83a-4049-bfe5-b0e0fbd5163f",
                  "name": "allowed web origins",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-allowed-origins-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "access.token.claim": "true"
                  }
                }
              ]
            },
            {
              "id": "30a09558-f8d5-42e1-9634-66241d93dadb",
              "name": "role_list",
              "description": "SAML role list",
              "protocol": "saml",
              "attributes": {
                "consent.screen.text": "${samlRoleListScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "3f2b4d8f-19bc-49bd-9e77-d9b4dd096b7a",
                  "name": "role list",
                  "protocol": "saml",
                  "protocolMapper": "saml-role-list-mapper",
                  "consentRequired": false,
                  "config": {
                    "single": "false",
                    "attribute.nameformat": "Basic",
                    "attribute.name": "Role"
                  }
                }
              ]
            },
            {
              "id": "005c1618-8237-4a54-93fe-08a7e8ada7f7",
              "name": "saml_organization",
              "description": "Organization Membership",
              "protocol": "saml",
              "attributes": {
                "display.on.consent.screen": "false"
              },
              "protocolMappers": [
                {
                  "id": "dd831d93-6da0-4e37-a5c0-6e3e0fef7119",
                  "name": "organization",
                  "protocol": "saml",
                  "protocolMapper": "saml-organization-membership-mapper",
                  "consentRequired": false,
                  "config": {}
                }
              ]
            },
            {
              "id": "45292308-c525-44eb-8ce2-c1c360857bbc",
              "name": "organization",
              "description": "Additional claims about the organization a subject belongs to",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "consent.screen.text": "${organizationScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "8836d9bb-e022-43ac-b63a-728b11a116c8",
                  "name": "organization",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-organization-membership-mapper",
                  "consentRequired": false,
                  "config": {
                    "id.token.claim": "true",
                    "introspection.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "organization",
                    "jsonType.label": "String",
                    "multivalued": "true"
                  }
                }
              ]
            },
            {
              "id": "139d59b6-83cb-4b0f-aa36-ff4160f963ec",
              "name": "email",
              "description": "OpenID Connect built-in scope: email",
              "protocol": "openid-connect",
              "attributes": {
                "include.in.token.scope": "true",
                "consent.screen.text": "${emailScopeConsentText}",
                "display.on.consent.screen": "true"
              },
              "protocolMappers": [
                {
                  "id": "fa75ee98-10fc-4d22-a802-4c1babbb0e00",
                  "name": "email",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "email",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email",
                    "jsonType.label": "String"
                  }
                },
                {
                  "id": "e7e38d8c-408d-49ad-bce3-529a73b26e75",
                  "name": "email verified",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-property-mapper",
                  "consentRequired": false,
                  "config": {
                    "introspection.token.claim": "true",
                    "userinfo.token.claim": "true",
                    "user.attribute": "emailVerified",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "email_verified",
                    "jsonType.label": "boolean"
                  }
                }
              ]
            }
          ],
          "defaultDefaultClientScopes": [
            "role_list",
            "saml_organization",
            "profile",
            "email",
            "roles",
            "web-origins",
            "acr",
            "basic"
          ],
          "defaultOptionalClientScopes": [
            "offline_access",
            "address",
            "phone",
            "microprofile-jwt",
            "organization"
          ],
          "browserSecurityHeaders": {
            "contentSecurityPolicyReportOnly": "",
            "xContentTypeOptions": "nosniff",
            "referrerPolicy": "no-referrer",
            "xRobotsTag": "none",
            "xFrameOptions": "SAMEORIGIN",
            "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
            "xXSSProtection": "1; mode=block",
            "strictTransportSecurity": "max-age=31536000; includeSubDomains"
          },
          "smtpServer": {},
          "eventsEnabled": false,
          "eventsListeners": [
            "jboss-logging"
          ],
          "enabledEventTypes": [],
          "adminEventsEnabled": false,
          "adminEventsDetailsEnabled": false,
          "identityProviders": [
            {
              "alias": "oidc",
              "displayName": "Your VASS account",
              "internalId": "8d16c029-519e-4b87-af08-82701fbeb1ba",
              "providerId": "oidc",
              "enabled": true,
              "updateProfileFirstLoginMode": "on",
              "trustEmail": true,
              "storeToken": false,
              "addReadTokenRoleOnCreate": false,
              "authenticateByDefault": false,
              "linkOnly": false,
              "hideOnLogin": false,
              "config": {
                "tokenUrl": "https://trialtenantotb914ke.ciamlogin.com/f5404e79-73f8-43e7-a5d6-3854e55db33c/oauth2/v2.0/token",
                "acceptsPromptNoneForwardFromClient": "false",
                "jwksUrl": "https://trialtenantotb914ke.ciamlogin.com/f5404e79-73f8-43e7-a5d6-3854e55db33c/discovery/v2.0/keys",
                "isAccessTokenJWT": "false",
                "filteredByClaim": "false",
                "backchannelSupported": "false",
                "caseSensitiveOriginalUsername": "false",
                "issuer": "https://f5404e79-73f8-43e7-a5d6-3854e55db33c.ciamlogin.com/f5404e79-73f8-43e7-a5d6-3854e55db33c/v2.0",
                "loginHint": "false",
                "clientAuthMethod": "client_secret_post",
                "syncMode": "LEGACY",
                "clientSecret": "**********",
                "allowedClockSkew": "0",
                "defaultScope": "email profile",
                "userInfoUrl": "https://graph.microsoft.com/oidc/userinfo",
                "validateSignature": "true",
                "clientId": "56150027-5c1f-4f37-a97f-c2a95b170bb7",
                "uiLocales": "false",
                "disableNonce": "false",
                "useJwksUrl": "true",
                "sendClientIdOnLogout": "false",
                "pkceEnabled": "false",
                "metadataDescriptorUrl": "https://TrialTenantOTb914Ke.ciamlogin.com/f5404e79-73f8-43e7-a5d6-3854e55db33c/v2.0/.well-known/openid-configuration",
                "authorizationUrl": "https://trialtenantotb914ke.ciamlogin.com/f5404e79-73f8-43e7-a5d6-3854e55db33c/oauth2/v2.0/authorize",
                "disableUserInfo": "false",
                "logoutUrl": "https://trialtenantotb914ke.ciamlogin.com/f5404e79-73f8-43e7-a5d6-3854e55db33c/oauth2/v2.0/logout",
                "sendIdTokenOnLogout": "true",
                "passMaxAge": "false"
              }
            }
          ],
          "identityProviderMappers": [
            {
              "id": "bc6fd40d-88d6-4cf1-baed-863153e1624a",
              "name": "email",
              "identityProviderAlias": "oidc",
              "identityProviderMapper": "oidc-user-attribute-idp-mapper",
              "config": {
                "syncMode": "FORCE",
                "claim": "email",
                "user.attribute": "email"
              }
            },
            {
              "id": "8fe3eb4f-8c8b-4309-9321-abb8aaf29a24",
              "name": "email to username",
              "identityProviderAlias": "oidc",
              "identityProviderMapper": "oidc-user-attribute-idp-mapper",
              "config": {
                "syncMode": "FORCE",
                "claim": "sub",
                "user.attribute": "username"
              }
            },
            {
              "id": "290ac86c-e21f-495c-8b23-aa1de77df00f",
              "name": "given_name",
              "identityProviderAlias": "oidc",
              "identityProviderMapper": "oidc-user-attribute-idp-mapper",
              "config": {
                "syncMode": "INHERIT",
                "claim": "given_name",
                "user.attribute": "firstName"
              }
            },
            {
              "id": "2d73bbb7-c050-42bc-ae30-2b14b3fe7a30",
              "name": "family_name",
              "identityProviderAlias": "oidc",
              "identityProviderMapper": "oidc-user-attribute-idp-mapper",
              "config": {
                "syncMode": "INHERIT",
                "claim": "family_name",
                "user.attribute": "lastName"
              }
            }
          ],
          "components": {
            "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
              {
                "id": "b1ec0891-42c9-4018-ae40-5fd86ca0a8e8",
                "name": "Allowed Protocol Mapper Types",
                "providerId": "allowed-protocol-mappers",
                "subType": "authenticated",
                "subComponents": {},
                "config": {
                  "allowed-protocol-mapper-types": [
                    "saml-role-list-mapper",
                    "oidc-usermodel-attribute-mapper",
                    "saml-user-property-mapper",
                    "oidc-address-mapper",
                    "oidc-sha256-pairwise-sub-mapper",
                    "oidc-full-name-mapper",
                    "saml-user-attribute-mapper",
                    "oidc-usermodel-property-mapper"
                  ]
                }
              },
              {
                "id": "6754b64a-7417-45cf-b6b5-da3618ffa070",
                "name": "Allowed Client Scopes",
                "providerId": "allowed-client-templates",
                "subType": "authenticated",
                "subComponents": {},
                "config": {
                  "allow-default-scopes": [
                    "true"
                  ]
                }
              },
              {
                "id": "08ced9b8-6ba4-44e0-a7d5-0403298c02fc",
                "name": "Trusted Hosts",
                "providerId": "trusted-hosts",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "host-sending-registration-request-must-match": [
                    "true"
                  ],
                  "client-uris-must-match": [
                    "true"
                  ]
                }
              },
              {
                "id": "c02e9146-e15a-47a2-ad49-30273700392d",
                "name": "Consent Required",
                "providerId": "consent-required",
                "subType": "anonymous",
                "subComponents": {},
                "config": {}
              },
              {
                "id": "0c66b104-0751-4472-bd8a-0548f536836e",
                "name": "Allowed Client Scopes",
                "providerId": "allowed-client-templates",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "allow-default-scopes": [
                    "true"
                  ]
                }
              },
              {
                "id": "5eafb531-ea1f-4cbf-9edd-a880f6b4619b",
                "name": "Max Clients Limit",
                "providerId": "max-clients",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "max-clients": [
                    "200"
                  ]
                }
              },
              {
                "id": "11ef5269-7cad-4ce6-afeb-a3867c79cdff",
                "name": "Allowed Protocol Mapper Types",
                "providerId": "allowed-protocol-mappers",
                "subType": "anonymous",
                "subComponents": {},
                "config": {
                  "allowed-protocol-mapper-types": [
                    "oidc-sha256-pairwise-sub-mapper",
                    "oidc-usermodel-attribute-mapper",
                    "saml-user-property-mapper",
                    "oidc-full-name-mapper",
                    "oidc-address-mapper",
                    "saml-role-list-mapper",
                    "oidc-usermodel-property-mapper",
                    "saml-user-attribute-mapper"
                  ]
                }
              },
              {
                "id": "f12bbe9b-05b8-4a41-b34c-d15d3b77cd62",
                "name": "Full Scope Disabled",
                "providerId": "scope",
                "subType": "anonymous",
                "subComponents": {},
                "config": {}
              }
            ],
            "org.keycloak.keys.KeyProvider": [
              {
                "id": "5eaddac6-f443-4e23-9611-f5d0e5a19b18",
                "name": "aes-generated",
                "providerId": "aes-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ]
                }
              },
              {
                "id": "9967e002-c393-4269-a78c-3866bd866ecf",
                "name": "rsa-generated",
                "providerId": "rsa-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ]
                }
              },
              {
                "id": "17c84906-5e08-45d3-82e9-6ff022633632",
                "name": "hmac-generated-hs512",
                "providerId": "hmac-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ],
                  "algorithm": [
                    "HS512"
                  ]
                }
              },
              {
                "id": "1eb81264-8113-4a67-aa63-41ee2ca4e83e",
                "name": "rsa-enc-generated",
                "providerId": "rsa-enc-generated",
                "subComponents": {},
                "config": {
                  "priority": [
                    "100"
                  ],
                  "algorithm": [
                    "RSA-OAEP"
                  ]
                }
              }
            ]
          },
          "internationalizationEnabled": false,
          "supportedLocales": [],
          "authenticationFlows": [
            {
              "id": "ebc138a0-8e7d-4461-9edc-7d453640c091",
              "alias": "Account verification options",
              "description": "Method with which to verity the existing account",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "idp-email-verification",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": true,
                  "flowAlias": "Verify Existing Account by Re-authentication",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "c7f84e84-7299-40ef-83ff-62339d012390",
              "alias": "Browser - Conditional OTP",
              "description": "Flow to determine if the OTP is required for the authentication",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "auth-otp-form",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "541ab8bb-6615-4a1c-b73f-72b7cd115ab7",
              "alias": "Browser - Conditional Organization",
              "description": "Flow to determine if the organization identity-first login is to be used",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "organization",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "57599886-359c-42b3-a2e2-afa9c2885070",
              "alias": "Direct Grant - Conditional OTP",
              "description": "Flow to determine if the OTP is required for the authentication",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "direct-grant-validate-otp",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "484cea0e-bfb6-4ccd-ae32-b96fbd8e32bb",
              "alias": "First Broker Login - Conditional Organization",
              "description": "Flow to determine if the authenticator that adds organization members is to be used",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "idp-add-organization-member",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "8d8baf67-3f5d-4ac2-8513-21532dbf79c7",
              "alias": "First broker login - Conditional OTP",
              "description": "Flow to determine if the OTP is required for the authentication",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "auth-otp-form",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "e1f8f022-d199-442b-96b2-fc6da59878d3",
              "alias": "Handle Existing Account",
              "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "idp-confirm-link",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": true,
                  "flowAlias": "Account verification options",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "c14f989d-c65c-47f1-8ffa-304371edbc85",
              "alias": "Organization",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticatorFlow": true,
                  "requirement": "CONDITIONAL",
                  "priority": 10,
                  "autheticatorFlow": true,
                  "flowAlias": "Browser - Conditional Organization",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "422925f4-a668-4bc5-83f7-5a958763279a",
              "alias": "Reset - Conditional OTP",
              "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "conditional-user-configured",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "reset-otp",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "f21aa422-77a8-45a6-837d-7b75f65885b1",
              "alias": "User creation or linking",
              "description": "Flow for the existing/non-existing user alternatives",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticatorConfig": "create unique user config",
                  "authenticator": "idp-create-user-if-unique",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": true,
                  "flowAlias": "Handle Existing Account",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "6ccad84e-cd24-43f2-a181-f396f5e2e066",
              "alias": "Verify Existing Account by Re-authentication",
              "description": "Reauthentication of existing account",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "idp-username-password-form",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "CONDITIONAL",
                  "priority": 20,
                  "autheticatorFlow": true,
                  "flowAlias": "First broker login - Conditional OTP",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "7697e8d9-7f29-4ac4-9a5a-cb21f9bff56f",
              "alias": "browser",
              "description": "Browser based authentication",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "auth-cookie",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "auth-spnego",
                  "authenticatorFlow": false,
                  "requirement": "DISABLED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "identity-provider-redirector",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 25,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "ALTERNATIVE",
                  "priority": 26,
                  "autheticatorFlow": true,
                  "flowAlias": "Organization",
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "autheticatorFlow": true,
                  "flowAlias": "forms",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "35ceaa7b-494c-4581-953f-ac6cc586f963",
              "alias": "clients",
              "description": "Base authentication for clients",
              "providerId": "client-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "client-secret",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "client-jwt",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "client-secret-jwt",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 30,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "client-x509",
                  "authenticatorFlow": false,
                  "requirement": "ALTERNATIVE",
                  "priority": 40,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "4ab13bdb-9bf3-4f48-a71f-5076d5dffa51",
              "alias": "direct grant",
              "description": "OpenID Connect Resource Owner Grant",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "direct-grant-validate-username",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "direct-grant-validate-password",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "CONDITIONAL",
                  "priority": 30,
                  "autheticatorFlow": true,
                  "flowAlias": "Direct Grant - Conditional OTP",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "1dd58b1a-fb0b-489c-9962-a5cbf00291fd",
              "alias": "docker auth",
              "description": "Used by Docker clients to authenticate against the IDP",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "docker-http-basic-authenticator",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "f061961d-af62-4360-af9d-cc0bcc0b0e38",
              "alias": "first broker login",
              "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticatorConfig": "review profile config",
                  "authenticator": "idp-review-profile",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": true,
                  "flowAlias": "User creation or linking",
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "CONDITIONAL",
                  "priority": 50,
                  "autheticatorFlow": true,
                  "flowAlias": "First Broker Login - Conditional Organization",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "4c07c724-5dba-455c-bc93-690d5547de52",
              "alias": "forms",
              "description": "Username, password, otp and other auth forms.",
              "providerId": "basic-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "auth-username-password-form",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "CONDITIONAL",
                  "priority": 20,
                  "autheticatorFlow": true,
                  "flowAlias": "Browser - Conditional OTP",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "f82fa038-2b0e-41d5-8a89-ba171a0e3b92",
              "alias": "registration",
              "description": "Registration flow",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "registration-page-form",
                  "authenticatorFlow": true,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": true,
                  "flowAlias": "registration form",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "45b29f96-9c4a-48ba-9a0f-e065842dc822",
              "alias": "registration form",
              "description": "Registration form",
              "providerId": "form-flow",
              "topLevel": false,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "registration-user-creation",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "registration-password-action",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 50,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "registration-recaptcha-action",
                  "authenticatorFlow": false,
                  "requirement": "DISABLED",
                  "priority": 60,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "registration-terms-and-conditions",
                  "authenticatorFlow": false,
                  "requirement": "DISABLED",
                  "priority": 70,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "9d7a10e9-87d3-4392-9506-3f0a2afe80e9",
              "alias": "reset credentials",
              "description": "Reset credentials for a user if they forgot their password or something",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "reset-credentials-choose-user",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "reset-credential-email",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 20,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticator": "reset-password",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 30,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                },
                {
                  "authenticatorFlow": true,
                  "requirement": "CONDITIONAL",
                  "priority": 40,
                  "autheticatorFlow": true,
                  "flowAlias": "Reset - Conditional OTP",
                  "userSetupAllowed": false
                }
              ]
            },
            {
              "id": "67439e00-8670-453d-8795-24929388827a",
              "alias": "saml ecp",
              "description": "SAML ECP Profile Authentication Flow",
              "providerId": "basic-flow",
              "topLevel": true,
              "builtIn": true,
              "authenticationExecutions": [
                {
                  "authenticator": "http-basic-authenticator",
                  "authenticatorFlow": false,
                  "requirement": "REQUIRED",
                  "priority": 10,
                  "autheticatorFlow": false,
                  "userSetupAllowed": false
                }
              ]
            }
          ],
          "authenticatorConfig": [
            {
              "id": "b511d9f7-1965-4ae3-bd45-e17f998a7084",
              "alias": "create unique user config",
              "config": {
                "require.password.update.after.registration": "false"
              }
            },
            {
              "id": "d6581c53-8a58-482c-9b1b-8f04f7ef39f0",
              "alias": "review profile config",
              "config": {
                "update.profile.on.first.login": "missing"
              }
            }
          ],
          "requiredActions": [
            {
              "alias": "CONFIGURE_TOTP",
              "name": "Configure OTP",
              "providerId": "CONFIGURE_TOTP",
              "enabled": true,
              "defaultAction": false,
              "priority": 10,
              "config": {}
            },
            {
              "alias": "TERMS_AND_CONDITIONS",
              "name": "Terms and Conditions",
              "providerId": "TERMS_AND_CONDITIONS",
              "enabled": false,
              "defaultAction": false,
              "priority": 20,
              "config": {}
            },
            {
              "alias": "UPDATE_PASSWORD",
              "name": "Update Password",
              "providerId": "UPDATE_PASSWORD",
              "enabled": true,
              "defaultAction": false,
              "priority": 30,
              "config": {}
            },
            {
              "alias": "UPDATE_PROFILE",
              "name": "Update Profile",
              "providerId": "UPDATE_PROFILE",
              "enabled": true,
              "defaultAction": false,
              "priority": 40,
              "config": {}
            },
            {
              "alias": "VERIFY_EMAIL",
              "name": "Verify Email",
              "providerId": "VERIFY_EMAIL",
              "enabled": true,
              "defaultAction": false,
              "priority": 50,
              "config": {}
            },
            {
              "alias": "delete_account",
              "name": "Delete Account",
              "providerId": "delete_account",
              "enabled": false,
              "defaultAction": false,
              "priority": 60,
              "config": {}
            },
            {
              "alias": "webauthn-register",
              "name": "Webauthn Register",
              "providerId": "webauthn-register",
              "enabled": true,
              "defaultAction": false,
              "priority": 70,
              "config": {}
            },
            {
              "alias": "webauthn-register-passwordless",
              "name": "Webauthn Register Passwordless",
              "providerId": "webauthn-register-passwordless",
              "enabled": true,
              "defaultAction": false,
              "priority": 80,
              "config": {}
            },
            {
              "alias": "VERIFY_PROFILE",
              "name": "Verify Profile",
              "providerId": "VERIFY_PROFILE",
              "enabled": true,
              "defaultAction": false,
              "priority": 90,
              "config": {}
            },
            {
              "alias": "delete_credential",
              "name": "Delete Credential",
              "providerId": "delete_credential",
              "enabled": true,
              "defaultAction": false,
              "priority": 100,
              "config": {}
            },
            {
              "alias": "update_user_locale",
              "name": "Update User Locale",
              "providerId": "update_user_locale",
              "enabled": true,
              "defaultAction": false,
              "priority": 1000,
              "config": {}
            }
          ],
          "browserFlow": "browser",
          "registrationFlow": "registration",
          "directGrantFlow": "direct grant",
          "resetCredentialsFlow": "reset credentials",
          "clientAuthenticationFlow": "clients",
          "dockerAuthenticationFlow": "docker auth",
          "firstBrokerLoginFlow": "first broker login",
          "attributes": {
            "cibaBackchannelTokenDeliveryMode": "poll",
            "cibaAuthRequestedUserHint": "login_hint",
            "oauth2DevicePollingInterval": "5",
            "clientOfflineSessionMaxLifespan": "0",
            "clientSessionIdleTimeout": "0",
            "clientOfflineSessionIdleTimeout": "0",
            "cibaInterval": "5",
            "realmReusableOtpCode": "false",
            "cibaExpiresIn": "120",
            "oauth2DeviceCodeLifespan": "600",
            "parRequestUriLifespan": "60",
            "clientSessionMaxLifespan": "0",
            "organizationsEnabled": "false"
          },
          "keycloakVersion": "26.0.5",
          "userManagedAccessAllowed": false,
          "organizationsEnabled": false,
          "clientProfiles": {
            "profiles": []
          },
          "clientPolicies": {
            "policies": []
          }
        }
