global:
  serverName: "local-server"
  domain: {{ requiredEnv "DOMAIN" | quote }}
  enableHttps: true

service:
  healthPath: /healthz

livenessProbe:
  enabled: true
  initialDelaySeconds: 10

readinessProbe:
  enabled: true

image:
  repository: {{ requiredEnv "IMAGE_REGISTRY" }}/konstellation/kdl-server
  tag: latest
  pullPolicy: Always

env:
  KDL_SERVER_MONGODB_URI: "mongodb://{{ .Values.mongodb_user }}:{{ .Values.mongodb_password }}@mongodb-svc.mongodb:27017/{{ .Values.mongodb_user }}?authSource={{ .Values.mongodb_user }}&authMechanism=SCRAM-SHA-256"
  KUBECONFIG_DOWNLOAD_ENABLED: {{ requiredEnv "KUBECONFIG_ENABLED" }}
  KUBECONFIG_EXTERNAL_SERVER_URL: {{ env "EXTERNAL_SERVER_URL" | quote }}
  MINIO_ACCESS_KEY: "{{ .Values.minio_access_key }}"
  MINIO_ENDPOINT: "minio.minio:9000"
  MINIO_SECRET_KEY: "{{ .Values.minio_secret_key }}"
  MINIO_CONSOLE_ENDPOINT: "https://minio-console.{{ requiredEnv "DOMAIN" }}"
  SERVER_URL: https://kdlapp.{{ requiredEnv "DOMAIN" }}

readyChecker:
  enabled: true
  services:
  - name: mongodb
    address: mongodb-svc.mongodb
    port: 27017
  - name: keycloak
    address: keycloak
    port: 80

# -- Keycloak subchart deployment
# </br> Ref: https://github.com/konstellation-io/helm-charts/blob/konstellation-base-1.0.2/charts/konstellation-base/values.yaml
keycloak:
  enabled: true

  fullnameOverride: keycloak

  image:
    repository: keycloak/keycloak
    tag: "26.0"

  service:
    healthPath: /realms/master
    targetPort: 8080

  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: selfsigned-clusterissuer
      cert-manager.io/secret-template: |
        {"annotations": {"reflector.v1.k8s.emberstack.com/reflection-auto-enabled": "true", "reflector.v1.k8s.emberstack.com/reflection-allowed": "true", "reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces": "minio"}}
    hosts:
    - host: keycloak.{{ requiredEnv "DOMAIN" }}
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls:
      - secretName: keycloak-tls
        hosts:
        - keycloak.{{ requiredEnv "DOMAIN" }}

  serviceAccount:
    create: true

  livenessProbe:
    enabled: false

  readinessProbe:
    enabled: false
    httpGet:
      path: /realms/master

  command:
  - "/opt/keycloak/bin/kc.sh"
  - "start"
  - "--verbose"
  - "--import-realm"

  env:
    KC_BOOTSTRAP_ADMIN_PASSWORD: {{ .Values.keycloak_admin_password | quote }}
    KC_BOOTSTRAP_ADMIN_USERNAME: {{ .Values.keycloak_admin_user | quote }}
    KC_DB_PASSWORD: keycloak
    KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
    KC_DB_USERNAME: keycloak
    KC_DB: postgres
    KC_HEALTH_ENABLED: true
    KC_HOSTNAME: keycloak.{{ requiredEnv "DOMAIN" }}
    KC_HTTP_ENABLED: true
    KC_METRICS_ENABLED: true
    KC_PROXY_HEADERS: xforwarded
    KC_PROXY: edge

  volumes:
    - name: keycloak-initial-realm
      configMap:
        name: keycloak-initial-realm

  volumeMounts:
    - name: keycloak-initial-realm
      mountPath: /opt/keycloak/data/import/initial-realm.json
      subPath: initial-realm.json
      readOnly: true

# -- MinIO subchart deployment
# </br> Ref: https://github.com/minio/minio/blob/RELEASE.2021-10-13T00-23-17Z/helm/minio/values.yaml
minio:
  enabled: true

  fullnameOverride: minio
  nameOverride: minio

  mode: standalone

  ingress:
    enabled: false
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: selfsigned-clusterissuer
      nginx.ingress.kubernetes.io/proxy-body-size: "4096m"
    path: /
    hosts:
      - minio.{{ requiredEnv "DOMAIN" }}
    tls:
      - secretName: minio-tls
        hosts:
        - minio.{{ requiredEnv "DOMAIN" }}

  consoleIngress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: selfsigned-clusterissuer
      nginx.ingress.kubernetes.io/proxy-body-size: "4096m"
    path: /
    hosts:
      - minio-console.{{ requiredEnv "DOMAIN" }}
    tls:
      - secretName: minio-console-tls
        hosts:
        - minio-console.{{ requiredEnv "DOMAIN" }}

  rootUser: minio
  rootPassword: minio123

  persistence:
    enabled: true
    storageClass: {{ requiredEnv "STORAGE_CLASS_NAME" | quote }}
    existingClaim: "shared-volume"
    size: 1Gi
    accessMode: ReadWriteMany

  resources:
    requests:
      memory: 1Gi

# -- OAuth2-Proxy subchart deployment
# </br> Ref: https://github.com/oauth2-proxy/manifests/blob/main/helm/oauth2-proxy/values.yaml
oauth2proxy:
  enabled: true

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: selfsigned-clusterissuer
      nginx.ingress.kubernetes.io/configuration-snippet: |
        if ($request_uri = "/oauth2/sign_out") {
            return 302 "/oauth2/sign_out?rd=https%3A%2F%2Fkeycloak.{{ requiredEnv "DOMAIN" }}/realms/kdl/protocol/openid-connect/logout?client_id=proxy%26post_logout_redirect_uri=https%3A%2F%2Fkdlapp.{{ requiredEnv "DOMAIN" }}/";
        }
      nginx.ingress.kubernetes.io/server-snippet: |
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    className: nginx
    path: /
    pathType: ImplementationSpecific
    hosts:
      - kdlapp.{{ requiredEnv "DOMAIN" }}

  httpScheme: http

  config:
    clientID: proxy
    clientSecret: proxy654321
    cookieSecret: mycookiesecret16

    configFile: |-
      cookie_csrf_per_request=true
      cookie_domains=[".{{ requiredEnv "DOMAIN" }}"]
      cookie_samesite="strict"
      cookie_secure=false
      email_domains="*"
      errors_to_info_log=true
      http_address="https://kdlapp.{{ requiredEnv "DOMAIN" }}/"
      oidc_issuer_url="https://keycloak.{{ requiredEnv "DOMAIN" }}/realms/kdl"
      pass_user_headers=true
      provider="keycloak-oidc"
      redirect_url="https://kdlapp.{{ requiredEnv "DOMAIN" }}/oauth2/callback"
      set_authorization_header=true
      set_xauthrequest=true
      silence_ping_logging=true
      skip_auth_routes="/config.json"
      skip_provider_button=true
      ssl_insecure_skip_verify=true
      upstreams=["http://kdl-local-server:80/", "http://127.0.0.1:9000/mlflow/", "http://127.0.0.1:9000/filebrowser/", "http://127.0.0.1:9000/kg/", "http://127.0.0.1:9000/minio/"]
      whitelist_domains=[".{{ requiredEnv "DOMAIN" }}"]

  extraContainers:
    - name: project-proxy
      image: nginx:alpine
      ports:
        - containerPort: 9000
      volumeMounts:
        - name: project-proxy-nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf

  extraVolumes:
    - name: project-proxy-nginx-config
      configMap:
        name: project-proxy-nginx-config

# -- PostgreSQL subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  enabled: true

  fullnameOverride: postgresql
  nameOverride: postgresql

  replicaCount: 1

  auth:
    database: keycloak
    password: keycloak
    postgresPassword: postgres
    username: keycloak

  primary:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: {{ requiredEnv "STORAGE_CLASS_NAME" | quote }}

projectOperator:
  enabled: true

  image:
    repository: {{ requiredEnv "IMAGE_REGISTRY" }}/konstellation/kdl-project-operator
    pullPolicy: Always
    tag: latest

  templateCustomResource:
    spec:
      domain: {{ requiredEnv "DOMAIN" | quote }}
      mlflow:
        image:
          repository: {{ requiredEnv "IMAGE_REGISTRY" }}/konstellation/kdl-mlflow
          pullPolicy: Always
          tag: latest

        ingress:
          enabled: false

        podSecurityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false

        persistentVolume:
          enabled: true
          size: "1Gi"
          storageClass: {{ requiredEnv "STORAGE_CLASS_NAME" | quote }}

        env:
          AWS_ACCESS_KEY_ID: "{{ .Values.minio_access_key }}"
          AWS_SECRET_ACCESS_KEY: "{{ .Values.minio_secret_key }}"
          MLFLOW_S3_ENDPOINT_URL: "http://minio.minio:9000"

      filebrowser:
        image:
          repository: {{ requiredEnv "IMAGE_REGISTRY" }}/konstellation/kdl-filebrowser
          pullPolicy: Always
          tag: latest

        podSecurityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000

        securityContext:
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: false

        initContainers:
          - name: minio-checker
            image: busybox
            command: ['sh', '-c', 'while true; do nc -z minio 9000 && break; "[INFO] Waiting to reach minio endpoint..." && sleep 1; done']

        env:
          AWS_S3_ACCESS_KEY_ID: "{{ .Values.minio_access_key }}"
          AWS_S3_SECRET_ACCESS_KEY: "{{ .Values.minio_secret_key }}"
          AWS_S3_URL: "http://minio.minio:9000"

userToolsOperator:
  enabled: true

  image:
    repository: {{ requiredEnv "IMAGE_REGISTRY" }}/konstellation/kdl-user-tools-operator
    tag: latest
    pullPolicy: Always

  templateCustomResource:
    spec:
      podSecurityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000

      persistentVolume:
        storageClass: {{ requiredEnv "STORAGE_CLASS_NAME" | quote }}
        keepPVC: false

      kubeconfig:
        enabled: {{ requiredEnv "KUBECONFIG_ENABLED" }}
        externalServerUrl: {{ env "EXTERNAL_SERVER_URL" | quote }}

      repoCloner:
        image:
          repository: {{ requiredEnv "IMAGE_REGISTRY" }}/konstellation/kdl-repo-cloner
          pullPolicy: Always
          tag: latest

        env:
          KDL_SERVER_MONGODB_URI: "mongodb://{{ .Values.mongodb_user }}:{{ .Values.mongodb_password }}@mongodb-svc.mongodb:27017/{{ .Values.mongodb_user }}?authSource={{ .Values.mongodb_user }}&authMechanism=SCRAM-SHA-256"

      vscodeRuntime:
        env:
          AWS_ACCESS_KEY: "{{ .Values.minio_access_key }}"
          AWS_SECRET_KEY: "{{ .Values.minio_secret_key }}"
          MINIO_ENDPOINT: "minio.minio:9000"

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
