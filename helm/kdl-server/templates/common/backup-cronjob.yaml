{{ if .Values.backup.gitea.enabled }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: backup-gitea
  labels:
    app: backup-gitea
spec:
  schedule: {{ .Values.backup.gitea.schedule | quote }}
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 5
  successfulJobsHistoryLimit: 2
  startingDeadlineSeconds: 60 # 1min
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 60 # 1min
      template:
        spec:
          containers:
            - name: {{ .Values.backup.name }}
              image: {{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag }}
              imagePullPolicy: {{ .Values.backup.image.pullPolicy }}
              envFrom:
                - configMapRef:
                    name: gitea-config
                - secretRef:
                    name: postgres
                - secretRef:
                    name: backup-secrets
              volumeMounts:
              - name: gitea-pvc
                mountPath: "/data"
              command:
                - /bin/bash
              args:
                - -c
                - >-
                  echo "$DB_HOST:$POSTGRES_DB:$DB_USER:$POSTGRES_PASSWORD" > ~/.pgpass && 
                  chmod 600 ~/.pgpass &&
                  mkdir /backup &&
                  tar zcvf /backup/data.tar.gz --directory '/data' --exclude './gitea/indexers' . &&
                  pg_dump -h $(echo $DB_HOST | cut -f 1 -d ":" ) -p $(echo $DB_HOST | cut -f 2 -d ":" ) -U $DB_USER -v -F c -f /backup/postgres_gitea.dump $POSTGRES_DB &&
                  tar zcvf /backup.tar.gz /backup &&
                  aws s3 cp /backup.tar.gz s3://$BUCKET_NAME/backup_gitea_$(date +%Y%m%d).tar.gz

          {{- if .Values.imagePullSecrets }}
          imagePullSecrets:
          {{- range .Values.imagePullSecrets  }}
          - name: {{ . }}
          {{- end }}
          {{- end }}
          volumes:
            - name: gitea-pvc
              persistentVolumeClaim:
                claimName: gitea-pvc-gitea-0
          restartPolicy: OnFailure
{{- end }}
