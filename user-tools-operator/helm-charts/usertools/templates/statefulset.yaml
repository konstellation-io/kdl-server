apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "user-tools.fullname" . }}
  labels:
    {{- include "user-tools.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "user-tools.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "user-tools.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "user-tools.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "user-tools.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: create-kubeconfig
          image: alpine/k8s:1.20.7
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - /generate-kubeconfig.sh
          volumeMounts:
            - name: user-pvc
              mountPath: /home/coder
            - name: kubeconfig-tpl-configmap
              mountPath: /kubeconfig.tpl
              subPath: kubeconfig.tpl
            - name: kubeconfig-tpl-configmap
              mountPath: /generate-kubeconfig.sh
              subPath: generate-kubeconfig.sh
        - name: create-ssh-folder
          image: alpine:3.10
          imagePullPolicy: IfNotPresent
          command:
          - sh
          - -c
          - mkdir -p /home/kdl/.ssh && chown 1000:1000 /home/kdl/.ssh
          volumeMounts:
            - name: user-pvc
              mountPath: /home/kdl
      containers:
        - name: {{ .Chart.Name }}-repo-cloner
          image: {{ .Values.repoCloner.image.repository }}:{{ .Values.repoCloner.image.tag }}
          imagePullPolicy: {{ .Values.repoCloner.image.pullPolicy }}
          env:
            - name: KDL_USER_NAME
              value: "{{ .Values.username }}"
            - name: KDL_SERVER_MONGODB_URI
              value: "{{ .Values.repoCloner.mongodbURI }}"
            # Variables from secrets have precedence
            {{- $envList := dict }}
            {{- if .Values.repoCloner.envFromSecrets }}
            {{- range $key, $value := .Values.repoCloner.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables from configmap have precedence
            {{- if .Values.repoCloner.envFromConfigMap }}
            {{- range $key, $value := .Values.repoCloner.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Add Variables in plain text if they were not already added from secrets
            {{- if .Values.repoCloner.env }}
            {{- range $key, $value := .Values.repoCloner.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from secrets have precedence
            {{- if .Values.global.envFromSecrets }}
            {{- range $key, $value := .Values.global.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from configmap have precedence
            {{- if .Values.global.envFromConfigMap }}
            {{- range $key, $value := .Values.global.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Global variables in plain text if they were not already added from secrets
            {{- if .Values.global.env }}
            {{- range $key, $value := .Values.global.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: user-pvc
              mountPath: /home/kdl
            - name: {{ .Values.usernameSlug }}-ssh-keys-vol
              mountPath: /home/kdl/.ssh/id_rsa
              subPath: id_rsa
              readOnly: true
        {{- if .Values.vscode.enabled }}
        - name: {{ .Chart.Name }}-vscode
          image: {{ .Values.vscode.image.repository }}:{{ .Values.vscode.image.tag }}
          imagePullPolicy: {{ .Values.vscode.image.pullPolicy }}
          ports:
            - name: vscode
              containerPort: 8080
              protocol: TCP
          env:
          # Variables from secrets have precedence
            {{- $envList := dict }}
            {{- if .Values.vscode.envFromSecrets }}
            {{- range $key, $value := .Values.vscode.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables from configmap have precedence
            {{- if .Values.vscode.envFromConfigMap }}
            {{- range $key, $value := .Values.vscode.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Add Variables in plain text if they were not already added from secrets
            {{- if .Values.vscode.env }}
            {{- range $key, $value := .Values.vscode.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from secrets have precedence
            {{- if .Values.global.envFromSecrets }}
            {{- range $key, $value := .Values.global.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from configmap have precedence
            {{- if .Values.global.envFromConfigMap }}
            {{- range $key, $value := .Values.global.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Global variables in plain text if they were not already added from secrets
            {{- if .Values.global.env }}
            {{- range $key, $value := .Values.global.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: user-pvc
              mountPath: /home/coder
            {{- if .Values.sharedVolume.name }}
            - name: {{ .Values.sharedVolume.name }}
              mountPath: /home/coder/shared-storage
              readOnly: false
            {{- end }}
            - name: {{ .Values.usernameSlug }}-ssh-keys-vol
              mountPath: /home/coder/.ssh/id_rsa
              subPath: id_rsa
              readOnly: true
        {{- end }}
        - name: {{ .Chart.Name }}-vscode-runtime
          image: {{ .Values.vscodeRuntime.image.repository }}:{{ .Values.vscodeRuntime.image.tag }}
          imagePullPolicy: {{ .Values.vscodeRuntime.image.pullPolicy }}
          command:
            - "/bin/bash"
          args:
            - "-c"
            - "trap : TERM INT; sleep infinity & wait"
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: kdl-server
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: kdl-server
                  key: MINIO_SECRET_KEY
            - name: MINIO_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: kdl-server
                  key: MINIO_ENDPOINT
            - name: MC_HOST_dell
              value: "http://$(MINIO_ACCESS_KEY):$(MINIO_SECRET_KEY)@$(MINIO_ENDPOINT)"
            # Variables from secrets have precedence
            {{- $envList := dict }}
            {{- if .Values.vscodeRuntime.envFromSecrets }}
            {{- range $key, $value := .Values.vscodeRuntime.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables from configmap have precedence
            {{- if .Values.vscodeRuntime.envFromConfigMap }}
            {{- range $key, $value := .Values.vscodeRuntime.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Add Variables in plain text if they were not already added from secrets
            {{- if .Values.vscodeRuntime.env }}
            {{- range $key, $value := .Values.vscodeRuntime.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from secrets have precedence
            {{- if .Values.global.envFromSecrets }}
            {{- range $key, $value := .Values.global.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from configmap have precedence
            {{- if .Values.global.envFromConfigMap }}
            {{- range $key, $value := .Values.global.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Global variables in plain text if they were not already added from secrets
            {{- if .Values.global.env }}
            {{- range $key, $value := .Values.global.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: user-pvc
              mountPath: /home/coder
            {{- if .Values.sharedVolume.name }}
            - name: {{ .Values.sharedVolume.name }}
              mountPath: /home/coder/shared-storage
              readOnly: false
            {{- end }}
            - name: {{ .Values.usernameSlug }}-ssh-keys-vol
              mountPath: /home/coder/.ssh/id_rsa
              subPath: id_rsa
              readOnly: true
        {{- if .Values.vscode.enabled }}
        - name: {{ .Chart.Name }}-vscode-proxy
          image: {{ .Values.oauth2Proxy.image.repository }}:{{ .Values.oauth2Proxy.image.tag }}
          imagePullPolicy: {{ .Values.oauth2Proxy.image.pullPolicy }}
          args:
            - "--config=/etc/oauth2_proxy.cfg"
            - "--email-domain=*"
            - "--redirect-url={{ printf "%s://%s-code.%s/oauth2/callback" ( include "protocol" . ) .Values.usernameSlug .Values.domain }}"
            - "--upstream=http://127.0.0.1:8080/"
            - "--pass-user-headers=true"
            - "--set-xauthrequest=true"
            - "--skip-provider-button=true"
          ports:
            - name: http
              containerPort: 4180
              protocol: TCP
          env:
            - name: OAUTH2_PROXY_HTTP_ADDRESS
              value: "0.0.0.0:4180"
            - name: OAUTH2_PROXY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: codeserver-oauth2-credentials-{{ .Values.usernameSlug }}
                  key: OAUTH2_CLIENT_ID
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: codeserver-oauth2-credentials-{{ .Values.usernameSlug }}
                  key: OAUTH2_CLIENT_SECRET
            # Variables from secrets have precedence
            {{- $envList := dict }}
            {{- if .Values.oauth2Proxy.envFromSecrets }}
            {{- range $key, $value := .Values.oauth2Proxy.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables from configmap have precedence
            {{- if .Values.oauth2Proxy.envFromConfigMap }}
            {{- range $key, $value := .Values.oauth2Proxy.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Add Variables in plain text if they were not already added from secrets
            {{- if .Values.oauth2Proxy.env }}
            {{- range $key, $value := .Values.oauth2Proxy.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from secrets have precedence
            {{- if .Values.global.envFromSecrets }}
            {{- range $key, $value := .Values.global.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Variables global from configmap have precedence
            {{- if .Values.global.envFromConfigMap }}
            {{- range $key, $value := .Values.global.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Global variables in plain text if they were not already added from secrets
            {{- if .Values.global.env }}
            {{- range $key, $value := .Values.global.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: oauth2-config
              mountPath: /etc/oauth2_proxy.cfg
              subPath: oauth2_proxy.cfg
          ports:
            - name: http
              containerPort: 4180
              protocol: TCP
          {{- end }}
      volumes:
        - name: kubeconfig-tpl-configmap
          configMap:
            name: kubeconfig-{{ .Values.usernameSlug }}-tpl-configmap
        {{- if .Values.vscode.enabled }}
        - name: oauth2-config
          configMap:
            name: {{ include "user-tools.fullname" . }}-oauth2-proxy
        {{- end }}
        {{ if .Values.sharedVolume.name -}}
        - name: {{ .Values.sharedVolume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.sharedVolume.name }}-claim
            readOnly: false
        {{- end }}
        - name: {{ .Values.usernameSlug }}-ssh-keys-vol
          secret:
            secretName: {{ .Values.usernameSlug }}-ssh-keys
            items:
            - key: KDL_USER_PRIVATE_SSH_KEY
              path: id_rsa
        - name: {{ .Values.usernameSlug }}-ssh-pub
          secret:
            secretName: {{ .Values.usernameSlug }}-ssh-keys
            items:
            - key: KDL_USER_PUBLIC_SSH_KEY
              path: authorized_keys
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: user-pvc
        labels:
          app: user
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.storage.className }}
        resources:
          requests:
            storage:  {{ .Values.storage.size }}
